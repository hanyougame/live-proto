// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: agent/v1/agent.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveAgentRpcService_AgentSettleTaskExecute_FullMethodName    = "/agent.v1.LiveAgentRpcService/AgentSettleTaskExecute"
	LiveAgentRpcService_AgentDataCountTaskExecute_FullMethodName = "/agent.v1.LiveAgentRpcService/AgentDataCountTaskExecute"
)

// LiveAgentRpcServiceClient is the client API for LiveAgentRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveAgentRpcServiceClient interface {
	// 执行代理结算任务
	AgentSettleTaskExecute(ctx context.Context, in *AgentSettleTaskExecuteReq, opts ...grpc.CallOption) (*AgentSettleTaskExecuteResp, error)
	// 执行代理数据统计任务
	AgentDataCountTaskExecute(ctx context.Context, in *AgentDataCountTaskExecuteReq, opts ...grpc.CallOption) (*AgentDataCountTaskExecuteResp, error)
}

type liveAgentRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveAgentRpcServiceClient(cc grpc.ClientConnInterface) LiveAgentRpcServiceClient {
	return &liveAgentRpcServiceClient{cc}
}

func (c *liveAgentRpcServiceClient) AgentSettleTaskExecute(ctx context.Context, in *AgentSettleTaskExecuteReq, opts ...grpc.CallOption) (*AgentSettleTaskExecuteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentSettleTaskExecuteResp)
	err := c.cc.Invoke(ctx, LiveAgentRpcService_AgentSettleTaskExecute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveAgentRpcServiceClient) AgentDataCountTaskExecute(ctx context.Context, in *AgentDataCountTaskExecuteReq, opts ...grpc.CallOption) (*AgentDataCountTaskExecuteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentDataCountTaskExecuteResp)
	err := c.cc.Invoke(ctx, LiveAgentRpcService_AgentDataCountTaskExecute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveAgentRpcServiceServer is the server API for LiveAgentRpcService service.
// All implementations must embed UnimplementedLiveAgentRpcServiceServer
// for forward compatibility.
type LiveAgentRpcServiceServer interface {
	// 执行代理结算任务
	AgentSettleTaskExecute(context.Context, *AgentSettleTaskExecuteReq) (*AgentSettleTaskExecuteResp, error)
	// 执行代理数据统计任务
	AgentDataCountTaskExecute(context.Context, *AgentDataCountTaskExecuteReq) (*AgentDataCountTaskExecuteResp, error)
	mustEmbedUnimplementedLiveAgentRpcServiceServer()
}

// UnimplementedLiveAgentRpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveAgentRpcServiceServer struct{}

func (UnimplementedLiveAgentRpcServiceServer) AgentSettleTaskExecute(context.Context, *AgentSettleTaskExecuteReq) (*AgentSettleTaskExecuteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentSettleTaskExecute not implemented")
}
func (UnimplementedLiveAgentRpcServiceServer) AgentDataCountTaskExecute(context.Context, *AgentDataCountTaskExecuteReq) (*AgentDataCountTaskExecuteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentDataCountTaskExecute not implemented")
}
func (UnimplementedLiveAgentRpcServiceServer) mustEmbedUnimplementedLiveAgentRpcServiceServer() {}
func (UnimplementedLiveAgentRpcServiceServer) testEmbeddedByValue()                             {}

// UnsafeLiveAgentRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveAgentRpcServiceServer will
// result in compilation errors.
type UnsafeLiveAgentRpcServiceServer interface {
	mustEmbedUnimplementedLiveAgentRpcServiceServer()
}

func RegisterLiveAgentRpcServiceServer(s grpc.ServiceRegistrar, srv LiveAgentRpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedLiveAgentRpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveAgentRpcService_ServiceDesc, srv)
}

func _LiveAgentRpcService_AgentSettleTaskExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentSettleTaskExecuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveAgentRpcServiceServer).AgentSettleTaskExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveAgentRpcService_AgentSettleTaskExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveAgentRpcServiceServer).AgentSettleTaskExecute(ctx, req.(*AgentSettleTaskExecuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveAgentRpcService_AgentDataCountTaskExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentDataCountTaskExecuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveAgentRpcServiceServer).AgentDataCountTaskExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveAgentRpcService_AgentDataCountTaskExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveAgentRpcServiceServer).AgentDataCountTaskExecute(ctx, req.(*AgentDataCountTaskExecuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveAgentRpcService_ServiceDesc is the grpc.ServiceDesc for LiveAgentRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveAgentRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.v1.LiveAgentRpcService",
	HandlerType: (*LiveAgentRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgentSettleTaskExecute",
			Handler:    _LiveAgentRpcService_AgentSettleTaskExecute_Handler,
		},
		{
			MethodName: "AgentDataCountTaskExecute",
			Handler:    _LiveAgentRpcService_AgentDataCountTaskExecute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/v1/agent.proto",
}
