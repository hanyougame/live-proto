// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.2
// Source: activity.proto

package liveactivityinnerservice

import (
	"context"

	"github.com/hanyougame/live-proto/proto-gen-go/activity/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ActivityReply                    = v1.ActivityReply
	ActivityReq                      = v1.ActivityReq
	ActivityRewardReceiveReply       = v1.ActivityRewardReceiveReply
	ActivityRiskCheckReq             = v1.ActivityRiskCheckReq
	AddLuckyValReq                   = v1.AddLuckyValReq
	CheckUserRedPacketConditionReply = v1.CheckUserRedPacketConditionReply
	CheckUserRedPacketConditionReq   = v1.CheckUserRedPacketConditionReq
	GetLuckyPointItem                = v1.GetLuckyPointItem
	GetLuckyPointListReq             = v1.GetLuckyPointListReq
	GetLuckyPointReply               = v1.GetLuckyPointReply
	GetLuckyPointReq                 = v1.GetLuckyPointReq
	GetUserInviteCountReply          = v1.GetUserInviteCountReply
	GetUserInviteCountReq            = v1.GetUserInviteCountReq
	IncreaseUserRedPacketCountReq    = v1.IncreaseUserRedPacketCountReq
	LuckyPointsAddItem               = v1.LuckyPointsAddItem
	LuckyPointsAddListReply          = v1.LuckyPointsAddListReply
	LuckyPointsUsedItem              = v1.LuckyPointsUsedItem
	LuckyPointsUsedListReply         = v1.LuckyPointsUsedListReply
	LuckySpinEventReq                = v1.LuckySpinEventReq
	PromotionRewardApplyReply        = v1.PromotionRewardApplyReply
	PromotionRewardApplyReq          = v1.PromotionRewardApplyReq
	PromotionRewardReceiveReply      = v1.PromotionRewardReceiveReply
	PromotionRewardReceiveReq        = v1.PromotionRewardReceiveReq
	PromotionRiskCheckInfo           = v1.PromotionRiskCheckInfo
	PromotionRiskCheckReply          = v1.PromotionRiskCheckReply
	RedPacketCampaignEventReq        = v1.RedPacketCampaignEventReq
	RedPacketCountdownEventReq       = v1.RedPacketCountdownEventReq
	RequestInfo                      = v1.RequestInfo
	RewardData                       = v1.RewardData
	RewardListReply                  = v1.RewardListReply
	RewardListReq                    = v1.RewardListReq
	TaskRiskCheckReq                 = v1.TaskRiskCheckReq
	UseLuckyPoint                    = v1.UseLuckyPoint
	UseLuckyPointReq                 = v1.UseLuckyPointReq

	LiveActivityInnerService interface {
		// 抢红包活动事件
		RedPacketCampaignEvent(ctx context.Context, in *RedPacketCampaignEventReq, opts ...grpc.CallOption) (*ActivityReply, error)
		// 抢红包活动倒计时事件
		RedPacketCountdownEvent(ctx context.Context, in *RedPacketCountdownEventReq, opts ...grpc.CallOption) (*ActivityReply, error)
		// 判断用户抢红包条件
		CheckUserRedPacketCondition(ctx context.Context, in *CheckUserRedPacketConditionReq, opts ...grpc.CallOption) (*CheckUserRedPacketConditionReply, error)
		// 增加用户领取红包次数缓存
		IncreaseUserRedPacketCount(ctx context.Context, in *IncreaseUserRedPacketCountReq, opts ...grpc.CallOption) (*ActivityReply, error)
		// 幸运转盘活动事件
		LuckySpinEvent(ctx context.Context, in *LuckySpinEventReq, opts ...grpc.CallOption) (*ActivityReply, error)
		// 增加幸运值
		AddLuckyPoint(ctx context.Context, in *AddLuckyValReq, opts ...grpc.CallOption) (*ActivityReply, error)
		// 使用幸运值
		UseLuckyPoint(ctx context.Context, in *UseLuckyPointReq, opts ...grpc.CallOption) (*ActivityReply, error)
		// 我的幸运值
		GetUserLuckyPoint(ctx context.Context, in *GetLuckyPointReq, opts ...grpc.CallOption) (*GetLuckyPointReply, error)
		// 幸运值获取记录
		LuckyPointsAddList(ctx context.Context, in *GetLuckyPointListReq, opts ...grpc.CallOption) (*LuckyPointsAddListReply, error)
		// 幸运值消费记录
		LuckyPointsUsedList(ctx context.Context, in *GetLuckyPointListReq, opts ...grpc.CallOption) (*LuckyPointsUsedListReply, error)
		// 获奖记录 公告展示
		RewardList(ctx context.Context, in *RewardListReq, opts ...grpc.CallOption) (*RewardListReply, error)
		// 获取用户当前周期内有效邀请人数
		GetUserInviteCount(ctx context.Context, in *GetUserInviteCountReq, opts ...grpc.CallOption) (*GetUserInviteCountReply, error)
		// 领取优惠奖励
		ReceivePromotionReward(ctx context.Context, in *PromotionRewardReceiveReq, opts ...grpc.CallOption) (*PromotionRewardReceiveReply, error)
		// 活动优惠奖励风控校验
		PromotionActivityRiskCheck(ctx context.Context, in *ActivityRiskCheckReq, opts ...grpc.CallOption) (*PromotionRiskCheckReply, error)
		// 申请优惠奖励
		ApplyPromotionReward(ctx context.Context, in *PromotionRewardApplyReq, opts ...grpc.CallOption) (*PromotionRewardApplyReply, error)
		// 任务优惠奖励风控校验
		PromotionTaskRiskCheck(ctx context.Context, in *TaskRiskCheckReq, opts ...grpc.CallOption) (*PromotionRiskCheckReply, error)
	}

	defaultLiveActivityInnerService struct {
		cli zrpc.Client
	}
)

func NewLiveActivityInnerService(cli zrpc.Client) LiveActivityInnerService {
	return &defaultLiveActivityInnerService{
		cli: cli,
	}
}

// 抢红包活动事件
func (m *defaultLiveActivityInnerService) RedPacketCampaignEvent(ctx context.Context, in *RedPacketCampaignEventReq, opts ...grpc.CallOption) (*ActivityReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.RedPacketCampaignEvent(ctx, in, opts...)
}

// 抢红包活动倒计时事件
func (m *defaultLiveActivityInnerService) RedPacketCountdownEvent(ctx context.Context, in *RedPacketCountdownEventReq, opts ...grpc.CallOption) (*ActivityReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.RedPacketCountdownEvent(ctx, in, opts...)
}

// 判断用户抢红包条件
func (m *defaultLiveActivityInnerService) CheckUserRedPacketCondition(ctx context.Context, in *CheckUserRedPacketConditionReq, opts ...grpc.CallOption) (*CheckUserRedPacketConditionReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.CheckUserRedPacketCondition(ctx, in, opts...)
}

// 增加用户领取红包次数缓存
func (m *defaultLiveActivityInnerService) IncreaseUserRedPacketCount(ctx context.Context, in *IncreaseUserRedPacketCountReq, opts ...grpc.CallOption) (*ActivityReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.IncreaseUserRedPacketCount(ctx, in, opts...)
}

// 幸运转盘活动事件
func (m *defaultLiveActivityInnerService) LuckySpinEvent(ctx context.Context, in *LuckySpinEventReq, opts ...grpc.CallOption) (*ActivityReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.LuckySpinEvent(ctx, in, opts...)
}

// 增加幸运值
func (m *defaultLiveActivityInnerService) AddLuckyPoint(ctx context.Context, in *AddLuckyValReq, opts ...grpc.CallOption) (*ActivityReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.AddLuckyPoint(ctx, in, opts...)
}

// 使用幸运值
func (m *defaultLiveActivityInnerService) UseLuckyPoint(ctx context.Context, in *UseLuckyPointReq, opts ...grpc.CallOption) (*ActivityReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.UseLuckyPoint(ctx, in, opts...)
}

// 我的幸运值
func (m *defaultLiveActivityInnerService) GetUserLuckyPoint(ctx context.Context, in *GetLuckyPointReq, opts ...grpc.CallOption) (*GetLuckyPointReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.GetUserLuckyPoint(ctx, in, opts...)
}

// 幸运值获取记录
func (m *defaultLiveActivityInnerService) LuckyPointsAddList(ctx context.Context, in *GetLuckyPointListReq, opts ...grpc.CallOption) (*LuckyPointsAddListReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.LuckyPointsAddList(ctx, in, opts...)
}

// 幸运值消费记录
func (m *defaultLiveActivityInnerService) LuckyPointsUsedList(ctx context.Context, in *GetLuckyPointListReq, opts ...grpc.CallOption) (*LuckyPointsUsedListReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.LuckyPointsUsedList(ctx, in, opts...)
}

// 获奖记录 公告展示
func (m *defaultLiveActivityInnerService) RewardList(ctx context.Context, in *RewardListReq, opts ...grpc.CallOption) (*RewardListReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.RewardList(ctx, in, opts...)
}

// 获取用户当前周期内有效邀请人数
func (m *defaultLiveActivityInnerService) GetUserInviteCount(ctx context.Context, in *GetUserInviteCountReq, opts ...grpc.CallOption) (*GetUserInviteCountReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.GetUserInviteCount(ctx, in, opts...)
}

// 领取优惠奖励
func (m *defaultLiveActivityInnerService) ReceivePromotionReward(ctx context.Context, in *PromotionRewardReceiveReq, opts ...grpc.CallOption) (*PromotionRewardReceiveReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.ReceivePromotionReward(ctx, in, opts...)
}

// 活动优惠奖励风控校验
func (m *defaultLiveActivityInnerService) PromotionActivityRiskCheck(ctx context.Context, in *ActivityRiskCheckReq, opts ...grpc.CallOption) (*PromotionRiskCheckReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.PromotionActivityRiskCheck(ctx, in, opts...)
}

// 申请优惠奖励
func (m *defaultLiveActivityInnerService) ApplyPromotionReward(ctx context.Context, in *PromotionRewardApplyReq, opts ...grpc.CallOption) (*PromotionRewardApplyReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.ApplyPromotionReward(ctx, in, opts...)
}

// 任务优惠奖励风控校验
func (m *defaultLiveActivityInnerService) PromotionTaskRiskCheck(ctx context.Context, in *TaskRiskCheckReq, opts ...grpc.CallOption) (*PromotionRiskCheckReply, error) {
	client := v1.NewLiveActivityInnerServiceClient(m.cli.Conn())
	return client.PromotionTaskRiskCheck(ctx, in, opts...)
}
