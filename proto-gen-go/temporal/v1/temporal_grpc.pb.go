// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: temporal/v1/temporal.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemporalService_StartWorkflow_FullMethodName           = "/temporal.v1.TemporalService/StartWorkflow"
	TemporalService_CancelWorkflow_FullMethodName          = "/temporal.v1.TemporalService/CancelWorkflow"
	TemporalService_SignalWorkflow_FullMethodName          = "/temporal.v1.TemporalService/SignalWorkflow"
	TemporalService_GetWorkflowExecution_FullMethodName    = "/temporal.v1.TemporalService/GetWorkflowExecution"
	TemporalService_StartScheduleTask_FullMethodName       = "/temporal.v1.TemporalService/StartScheduleTask"
	TemporalService_BatchCancelWorkflows_FullMethodName    = "/temporal.v1.TemporalService/BatchCancelWorkflows"
	TemporalService_BatchStartScheduleTasks_FullMethodName = "/temporal.v1.TemporalService/BatchStartScheduleTasks"
)

// TemporalServiceClient is the client API for TemporalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Temporal服务定义
type TemporalServiceClient interface {
	// 启动工作流
	StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error)
	// 取消工作流
	CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error)
	// 发送信号到工作流
	SignalWorkflow(ctx context.Context, in *SignalWorkflowRequest, opts ...grpc.CallOption) (*SignalWorkflowResponse, error)
	// 获取工作流执行状态
	GetWorkflowExecution(ctx context.Context, in *GetWorkflowExecutionRequest, opts ...grpc.CallOption) (*GetWorkflowExecutionResponse, error)
	// 创建定时任务
	StartScheduleTask(ctx context.Context, in *ScheduleTaskRequest, opts ...grpc.CallOption) (*ScheduleTaskResponse, error)
	// 批量取消工作流
	BatchCancelWorkflows(ctx context.Context, in *BatchCancelWorkflowRequest, opts ...grpc.CallOption) (*BatchCancelWorkflowResponse, error)
	// 批量创建定时任务
	BatchStartScheduleTasks(ctx context.Context, in *BatchScheduleTaskRequest, opts ...grpc.CallOption) (*BatchScheduleTaskResponse, error)
}

type temporalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemporalServiceClient(cc grpc.ClientConnInterface) TemporalServiceClient {
	return &temporalServiceClient{cc}
}

func (c *temporalServiceClient) StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartWorkflowResponse)
	err := c.cc.Invoke(ctx, TemporalService_StartWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalServiceClient) CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelWorkflowResponse)
	err := c.cc.Invoke(ctx, TemporalService_CancelWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalServiceClient) SignalWorkflow(ctx context.Context, in *SignalWorkflowRequest, opts ...grpc.CallOption) (*SignalWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignalWorkflowResponse)
	err := c.cc.Invoke(ctx, TemporalService_SignalWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalServiceClient) GetWorkflowExecution(ctx context.Context, in *GetWorkflowExecutionRequest, opts ...grpc.CallOption) (*GetWorkflowExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, TemporalService_GetWorkflowExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalServiceClient) StartScheduleTask(ctx context.Context, in *ScheduleTaskRequest, opts ...grpc.CallOption) (*ScheduleTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleTaskResponse)
	err := c.cc.Invoke(ctx, TemporalService_StartScheduleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalServiceClient) BatchCancelWorkflows(ctx context.Context, in *BatchCancelWorkflowRequest, opts ...grpc.CallOption) (*BatchCancelWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCancelWorkflowResponse)
	err := c.cc.Invoke(ctx, TemporalService_BatchCancelWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temporalServiceClient) BatchStartScheduleTasks(ctx context.Context, in *BatchScheduleTaskRequest, opts ...grpc.CallOption) (*BatchScheduleTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchScheduleTaskResponse)
	err := c.cc.Invoke(ctx, TemporalService_BatchStartScheduleTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemporalServiceServer is the server API for TemporalService service.
// All implementations must embed UnimplementedTemporalServiceServer
// for forward compatibility.
//
// Temporal服务定义
type TemporalServiceServer interface {
	// 启动工作流
	StartWorkflow(context.Context, *StartWorkflowRequest) (*StartWorkflowResponse, error)
	// 取消工作流
	CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error)
	// 发送信号到工作流
	SignalWorkflow(context.Context, *SignalWorkflowRequest) (*SignalWorkflowResponse, error)
	// 获取工作流执行状态
	GetWorkflowExecution(context.Context, *GetWorkflowExecutionRequest) (*GetWorkflowExecutionResponse, error)
	// 创建定时任务
	StartScheduleTask(context.Context, *ScheduleTaskRequest) (*ScheduleTaskResponse, error)
	// 批量取消工作流
	BatchCancelWorkflows(context.Context, *BatchCancelWorkflowRequest) (*BatchCancelWorkflowResponse, error)
	// 批量创建定时任务
	BatchStartScheduleTasks(context.Context, *BatchScheduleTaskRequest) (*BatchScheduleTaskResponse, error)
	mustEmbedUnimplementedTemporalServiceServer()
}

// UnimplementedTemporalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemporalServiceServer struct{}

func (UnimplementedTemporalServiceServer) StartWorkflow(context.Context, *StartWorkflowRequest) (*StartWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkflow not implemented")
}
func (UnimplementedTemporalServiceServer) CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorkflow not implemented")
}
func (UnimplementedTemporalServiceServer) SignalWorkflow(context.Context, *SignalWorkflowRequest) (*SignalWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalWorkflow not implemented")
}
func (UnimplementedTemporalServiceServer) GetWorkflowExecution(context.Context, *GetWorkflowExecutionRequest) (*GetWorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowExecution not implemented")
}
func (UnimplementedTemporalServiceServer) StartScheduleTask(context.Context, *ScheduleTaskRequest) (*ScheduleTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScheduleTask not implemented")
}
func (UnimplementedTemporalServiceServer) BatchCancelWorkflows(context.Context, *BatchCancelWorkflowRequest) (*BatchCancelWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCancelWorkflows not implemented")
}
func (UnimplementedTemporalServiceServer) BatchStartScheduleTasks(context.Context, *BatchScheduleTaskRequest) (*BatchScheduleTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchStartScheduleTasks not implemented")
}
func (UnimplementedTemporalServiceServer) mustEmbedUnimplementedTemporalServiceServer() {}
func (UnimplementedTemporalServiceServer) testEmbeddedByValue()                         {}

// UnsafeTemporalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemporalServiceServer will
// result in compilation errors.
type UnsafeTemporalServiceServer interface {
	mustEmbedUnimplementedTemporalServiceServer()
}

func RegisterTemporalServiceServer(s grpc.ServiceRegistrar, srv TemporalServiceServer) {
	// If the following call pancis, it indicates UnimplementedTemporalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemporalService_ServiceDesc, srv)
}

func _TemporalService_StartWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalServiceServer).StartWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemporalService_StartWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalServiceServer).StartWorkflow(ctx, req.(*StartWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalService_CancelWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalServiceServer).CancelWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemporalService_CancelWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalServiceServer).CancelWorkflow(ctx, req.(*CancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalService_SignalWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalServiceServer).SignalWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemporalService_SignalWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalServiceServer).SignalWorkflow(ctx, req.(*SignalWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalService_GetWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalServiceServer).GetWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemporalService_GetWorkflowExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalServiceServer).GetWorkflowExecution(ctx, req.(*GetWorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalService_StartScheduleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalServiceServer).StartScheduleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemporalService_StartScheduleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalServiceServer).StartScheduleTask(ctx, req.(*ScheduleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalService_BatchCancelWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalServiceServer).BatchCancelWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemporalService_BatchCancelWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalServiceServer).BatchCancelWorkflows(ctx, req.(*BatchCancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemporalService_BatchStartScheduleTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchScheduleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemporalServiceServer).BatchStartScheduleTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemporalService_BatchStartScheduleTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemporalServiceServer).BatchStartScheduleTasks(ctx, req.(*BatchScheduleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemporalService_ServiceDesc is the grpc.ServiceDesc for TemporalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemporalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "temporal.v1.TemporalService",
	HandlerType: (*TemporalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWorkflow",
			Handler:    _TemporalService_StartWorkflow_Handler,
		},
		{
			MethodName: "CancelWorkflow",
			Handler:    _TemporalService_CancelWorkflow_Handler,
		},
		{
			MethodName: "SignalWorkflow",
			Handler:    _TemporalService_SignalWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowExecution",
			Handler:    _TemporalService_GetWorkflowExecution_Handler,
		},
		{
			MethodName: "StartScheduleTask",
			Handler:    _TemporalService_StartScheduleTask_Handler,
		},
		{
			MethodName: "BatchCancelWorkflows",
			Handler:    _TemporalService_BatchCancelWorkflows_Handler,
		},
		{
			MethodName: "BatchStartScheduleTasks",
			Handler:    _TemporalService_BatchStartScheduleTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "temporal/v1/temporal.proto",
}
