// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: temporal/v1/temporal.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 任务类型的枚举
type ScheduleTaskType int32

const (
	ScheduleTaskType_UNDEFINED             ScheduleTaskType = 0 // 未定义（默认值）
	ScheduleTaskType_GRAYLIST_EXPIRE_TASK  ScheduleTaskType = 1 // 灰名单失效任务
	ScheduleTaskType_WHITELIST_EXPIRE_TASK ScheduleTaskType = 2 // 白名单失效任务
)

// Enum value maps for ScheduleTaskType.
var (
	ScheduleTaskType_name = map[int32]string{
		0: "UNDEFINED",
		1: "GRAYLIST_EXPIRE_TASK",
		2: "WHITELIST_EXPIRE_TASK",
	}
	ScheduleTaskType_value = map[string]int32{
		"UNDEFINED":             0,
		"GRAYLIST_EXPIRE_TASK":  1,
		"WHITELIST_EXPIRE_TASK": 2,
	}
)

func (x ScheduleTaskType) Enum() *ScheduleTaskType {
	p := new(ScheduleTaskType)
	*p = x
	return p
}

func (x ScheduleTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_proto_enumTypes[0].Descriptor()
}

func (ScheduleTaskType) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_proto_enumTypes[0]
}

func (x ScheduleTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleTaskType.Descriptor instead.
func (ScheduleTaskType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{0}
}

// 工作流执行状态
type WorkflowExecutionStatus int32

const (
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_UNSPECIFIED      WorkflowExecutionStatus = 0
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_RUNNING          WorkflowExecutionStatus = 1
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_COMPLETED        WorkflowExecutionStatus = 2
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_FAILED           WorkflowExecutionStatus = 3
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_CANCELED         WorkflowExecutionStatus = 4
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_TERMINATED       WorkflowExecutionStatus = 5
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW WorkflowExecutionStatus = 6
	WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_TIMED_OUT        WorkflowExecutionStatus = 7
)

// Enum value maps for WorkflowExecutionStatus.
var (
	WorkflowExecutionStatus_name = map[int32]string{
		0: "WORKFLOW_EXECUTION_STATUS_UNSPECIFIED",
		1: "WORKFLOW_EXECUTION_STATUS_RUNNING",
		2: "WORKFLOW_EXECUTION_STATUS_COMPLETED",
		3: "WORKFLOW_EXECUTION_STATUS_FAILED",
		4: "WORKFLOW_EXECUTION_STATUS_CANCELED",
		5: "WORKFLOW_EXECUTION_STATUS_TERMINATED",
		6: "WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW",
		7: "WORKFLOW_EXECUTION_STATUS_TIMED_OUT",
	}
	WorkflowExecutionStatus_value = map[string]int32{
		"WORKFLOW_EXECUTION_STATUS_UNSPECIFIED":      0,
		"WORKFLOW_EXECUTION_STATUS_RUNNING":          1,
		"WORKFLOW_EXECUTION_STATUS_COMPLETED":        2,
		"WORKFLOW_EXECUTION_STATUS_FAILED":           3,
		"WORKFLOW_EXECUTION_STATUS_CANCELED":         4,
		"WORKFLOW_EXECUTION_STATUS_TERMINATED":       5,
		"WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW": 6,
		"WORKFLOW_EXECUTION_STATUS_TIMED_OUT":        7,
	}
)

func (x WorkflowExecutionStatus) Enum() *WorkflowExecutionStatus {
	p := new(WorkflowExecutionStatus)
	*p = x
	return p
}

func (x WorkflowExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_proto_enumTypes[1].Descriptor()
}

func (WorkflowExecutionStatus) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_proto_enumTypes[1]
}

func (x WorkflowExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowExecutionStatus.Descriptor instead.
func (WorkflowExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{1}
}

// 工作流 ID 重用策略枚举
type WorkflowIdReusePolicy int32

const (
	// 未指定策略（默认）
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED WorkflowIdReusePolicy = 0
	// 允许使用相同的 workflow ID 启动新的 workflow
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE WorkflowIdReusePolicy = 1
	// 仅当上一次执行结果为终止、取消、超时或失败时才允许使用相同的 workflow ID 启动新的 workflow
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY WorkflowIdReusePolicy = 2
	// 不允许重复使用 workflow ID
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE WorkflowIdReusePolicy = 3
	// 与 ALLOW_DUPLICATE 类似，但如果有运行中的 workflow，则会终止当前的并启动新的
	WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING WorkflowIdReusePolicy = 4
)

// Enum value maps for WorkflowIdReusePolicy.
var (
	WorkflowIdReusePolicy_name = map[int32]string{
		0: "WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED",
		1: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE",
		2: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY",
		3: "WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE",
		4: "WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING",
	}
	WorkflowIdReusePolicy_value = map[string]int32{
		"WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED":                 0,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE":             1,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY": 2,
		"WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE":            3,
		"WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING":        4,
	}
)

func (x WorkflowIdReusePolicy) Enum() *WorkflowIdReusePolicy {
	p := new(WorkflowIdReusePolicy)
	*p = x
	return p
}

func (x WorkflowIdReusePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkflowIdReusePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_proto_enumTypes[2].Descriptor()
}

func (WorkflowIdReusePolicy) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_proto_enumTypes[2]
}

func (x WorkflowIdReusePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowIdReusePolicy.Descriptor instead.
func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{2}
}

type TemporalReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemporalReq) Reset() {
	*x = TemporalReq{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalReq) ProtoMessage() {}

func (x *TemporalReq) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalReq.ProtoReflect.Descriptor instead.
func (*TemporalReq) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{0}
}

type TemporalReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemporalReply) Reset() {
	*x = TemporalReply{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalReply) ProtoMessage() {}

func (x *TemporalReply) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalReply.ProtoReflect.Descriptor instead.
func (*TemporalReply) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{1}
}

// 启动工作流请求
type StartWorkflowRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	WorkflowType   string                 `protobuf:"bytes,1,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`        // 工作流类型
	TaskQueue      string                 `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`                 // 任务队列
	WorkflowId     string                 `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`              // 工作流ID(可选)
	Input          []byte                 `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`                                          // 工作流输入参数(JSON编码)
	TimeoutSeconds int64                  `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"` // 超时时间(秒)
	Options        *WorkflowOptions       `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`                                      // 工作流选项
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StartWorkflowRequest) Reset() {
	*x = StartWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowRequest) ProtoMessage() {}

func (x *StartWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowRequest.ProtoReflect.Descriptor instead.
func (*StartWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{2}
}

func (x *StartWorkflowRequest) GetWorkflowType() string {
	if x != nil {
		return x.WorkflowType
	}
	return ""
}

func (x *StartWorkflowRequest) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *StartWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartWorkflowRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartWorkflowRequest) GetTimeoutSeconds() int64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *StartWorkflowRequest) GetOptions() *WorkflowOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// 工作流选项
type WorkflowOptions struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ExecutionTimeoutSeconds int64                  `protobuf:"varint,1,opt,name=execution_timeout_seconds,json=executionTimeoutSeconds,proto3" json:"execution_timeout_seconds,omitempty"` // 执行超时(秒)
	RunTimeoutSeconds       int64                  `protobuf:"varint,2,opt,name=run_timeout_seconds,json=runTimeoutSeconds,proto3" json:"run_timeout_seconds,omitempty"`                   // 运行超时(秒)
	TaskTimeoutSeconds      int64                  `protobuf:"varint,3,opt,name=task_timeout_seconds,json=taskTimeoutSeconds,proto3" json:"task_timeout_seconds,omitempty"`                // 任务超时(秒)
	RetryPolicy             []*RetryPolicy         `protobuf:"bytes,4,rep,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`                                        // 重试策略
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *WorkflowOptions) Reset() {
	*x = WorkflowOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions) ProtoMessage() {}

func (x *WorkflowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions.ProtoReflect.Descriptor instead.
func (*WorkflowOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{3}
}

func (x *WorkflowOptions) GetExecutionTimeoutSeconds() int64 {
	if x != nil {
		return x.ExecutionTimeoutSeconds
	}
	return 0
}

func (x *WorkflowOptions) GetRunTimeoutSeconds() int64 {
	if x != nil {
		return x.RunTimeoutSeconds
	}
	return 0
}

func (x *WorkflowOptions) GetTaskTimeoutSeconds() int64 {
	if x != nil {
		return x.TaskTimeoutSeconds
	}
	return 0
}

func (x *WorkflowOptions) GetRetryPolicy() []*RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

// 重试策略
type RetryPolicy struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	InitialIntervalSeconds int64                  `protobuf:"varint,1,opt,name=initial_interval_seconds,json=initialIntervalSeconds,proto3" json:"initial_interval_seconds,omitempty"` // 初始重试间隔(秒)
	BackoffCoefficient     float64                `protobuf:"fixed64,2,opt,name=backoff_coefficient,json=backoffCoefficient,proto3" json:"backoff_coefficient,omitempty"`              // 退避系数
	MaximumIntervalSeconds int64                  `protobuf:"varint,3,opt,name=maximum_interval_seconds,json=maximumIntervalSeconds,proto3" json:"maximum_interval_seconds,omitempty"` // 最大重试间隔(秒)
	MaximumAttempts        int32                  `protobuf:"varint,4,opt,name=maximum_attempts,json=maximumAttempts,proto3" json:"maximum_attempts,omitempty"`                        // 最大重试次数
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{4}
}

func (x *RetryPolicy) GetInitialIntervalSeconds() int64 {
	if x != nil {
		return x.InitialIntervalSeconds
	}
	return 0
}

func (x *RetryPolicy) GetBackoffCoefficient() float64 {
	if x != nil {
		return x.BackoffCoefficient
	}
	return 0
}

func (x *RetryPolicy) GetMaximumIntervalSeconds() int64 {
	if x != nil {
		return x.MaximumIntervalSeconds
	}
	return 0
}

func (x *RetryPolicy) GetMaximumAttempts() int32 {
	if x != nil {
		return x.MaximumAttempts
	}
	return 0
}

// 启动工作流响应
type StartWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"` // 工作流ID
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                // 运行ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartWorkflowResponse) Reset() {
	*x = StartWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowResponse) ProtoMessage() {}

func (x *StartWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowResponse.ProtoReflect.Descriptor instead.
func (*StartWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{5}
}

func (x *StartWorkflowResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartWorkflowResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

// 取消工作流请求
type CancelWorkflowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"` // 工作流ID
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                // 运行ID(可选)
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`                           // 取消原因
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelWorkflowRequest) Reset() {
	*x = CancelWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowRequest) ProtoMessage() {}

func (x *CancelWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CancelWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{6}
}

func (x *CancelWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *CancelWorkflowRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *CancelWorkflowRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 取消工作流响应
type CancelWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelWorkflowResponse) Reset() {
	*x = CancelWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowResponse) ProtoMessage() {}

func (x *CancelWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowResponse.ProtoReflect.Descriptor instead.
func (*CancelWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{7}
}

func (x *CancelWorkflowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 发送信号请求
type SignalWorkflowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`    // 工作流ID
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                   // 运行ID(可选)
	SignalName    string                 `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`    // 信号名称
	SignalInput   []byte                 `protobuf:"bytes,4,opt,name=signal_input,json=signalInput,proto3" json:"signal_input,omitempty"` // 信号数据(JSON编码)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalWorkflowRequest) Reset() {
	*x = SignalWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowRequest) ProtoMessage() {}

func (x *SignalWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowRequest.ProtoReflect.Descriptor instead.
func (*SignalWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{8}
}

func (x *SignalWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SignalWorkflowRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SignalWorkflowRequest) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

func (x *SignalWorkflowRequest) GetSignalInput() []byte {
	if x != nil {
		return x.SignalInput
	}
	return nil
}

// 发送信号响应
type SignalWorkflowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 是否成功
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalWorkflowResponse) Reset() {
	*x = SignalWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowResponse) ProtoMessage() {}

func (x *SignalWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowResponse.ProtoReflect.Descriptor instead.
func (*SignalWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{9}
}

func (x *SignalWorkflowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 获取工作流执行请求
type GetWorkflowExecutionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"` // 工作流ID
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                // 运行ID(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkflowExecutionRequest) Reset() {
	*x = GetWorkflowExecutionRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionRequest) ProtoMessage() {}

func (x *GetWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{10}
}

func (x *GetWorkflowExecutionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetWorkflowExecutionRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

// 获取工作流执行响应
type GetWorkflowExecutionResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	WorkflowId    string                  `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`                 // 工作流ID
	RunId         string                  `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                                // 运行ID
	Status        WorkflowExecutionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=temporal.v1.WorkflowExecutionStatus" json:"status,omitempty"` // 状态
	Result        []byte                  `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`                                           // 结果(JSON编码，如果已完成)
	ErrorMessage  string                  `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`           // 错误信息(如果失败)
	StartTimeUnix int64                   `protobuf:"varint,6,opt,name=start_time_unix,json=startTimeUnix,proto3" json:"start_time_unix,omitempty"`     // 开始时间(Unix时间戳)
	CloseTimeUnix int64                   `protobuf:"varint,7,opt,name=close_time_unix,json=closeTimeUnix,proto3" json:"close_time_unix,omitempty"`     // 结束时间(Unix时间戳，如果已结束)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWorkflowExecutionResponse) Reset() {
	*x = GetWorkflowExecutionResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowExecutionResponse) ProtoMessage() {}

func (x *GetWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*GetWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{11}
}

func (x *GetWorkflowExecutionResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetWorkflowExecutionResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetWorkflowExecutionResponse) GetStatus() WorkflowExecutionStatus {
	if x != nil {
		return x.Status
	}
	return WorkflowExecutionStatus_WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
}

func (x *GetWorkflowExecutionResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *GetWorkflowExecutionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetWorkflowExecutionResponse) GetStartTimeUnix() int64 {
	if x != nil {
		return x.StartTimeUnix
	}
	return 0
}

func (x *GetWorkflowExecutionResponse) GetCloseTimeUnix() int64 {
	if x != nil {
		return x.CloseTimeUnix
	}
	return 0
}

// 定时任务请求
type ScheduleTaskRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TaskId           string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                                         // 任务ID
	TaskType         ScheduleTaskType       `protobuf:"varint,2,opt,name=task_type,json=taskType,proto3,enum=temporal.v1.ScheduleTaskType" json:"task_type,omitempty"`                                // 任务类型
	DelaySeconds     int64                  `protobuf:"varint,3,opt,name=delay_seconds,json=delaySeconds,proto3" json:"delay_seconds,omitempty"`                                                      // 延迟时间(秒)
	Data             []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                                                                                           // 任务数据(JSON编码)
	WorkflowIdPolicy WorkflowIdReusePolicy  `protobuf:"varint,5,opt,name=workflow_id_policy,json=workflowIdPolicy,proto3,enum=temporal.v1.WorkflowIdReusePolicy" json:"workflow_id_policy,omitempty"` // 工作流 ID 重用策略枚举
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ScheduleTaskRequest) Reset() {
	*x = ScheduleTaskRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTaskRequest) ProtoMessage() {}

func (x *ScheduleTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTaskRequest.ProtoReflect.Descriptor instead.
func (*ScheduleTaskRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{12}
}

func (x *ScheduleTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ScheduleTaskRequest) GetTaskType() ScheduleTaskType {
	if x != nil {
		return x.TaskType
	}
	return ScheduleTaskType_UNDEFINED
}

func (x *ScheduleTaskRequest) GetDelaySeconds() int64 {
	if x != nil {
		return x.DelaySeconds
	}
	return 0
}

func (x *ScheduleTaskRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ScheduleTaskRequest) GetWorkflowIdPolicy() WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdPolicy
	}
	return WorkflowIdReusePolicy_WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED
}

// 定时任务响应
type ScheduleTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"` // 工作流ID
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                // 运行ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleTaskResponse) Reset() {
	*x = ScheduleTaskResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTaskResponse) ProtoMessage() {}

func (x *ScheduleTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTaskResponse.ProtoReflect.Descriptor instead.
func (*ScheduleTaskResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{13}
}

func (x *ScheduleTaskResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *ScheduleTaskResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

// 批量取消工作流请求
type BatchCancelWorkflowRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Workflows     []*CancelWorkflowRequest `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"` // 需要取消的工作流列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelWorkflowRequest) Reset() {
	*x = BatchCancelWorkflowRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelWorkflowRequest) ProtoMessage() {}

func (x *BatchCancelWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelWorkflowRequest.ProtoReflect.Descriptor instead.
func (*BatchCancelWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{14}
}

func (x *BatchCancelWorkflowRequest) GetWorkflows() []*CancelWorkflowRequest {
	if x != nil {
		return x.Workflows
	}
	return nil
}

// 批量取消工作流响应
type BatchCancelWorkflowResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Results       []*BatchCancelWorkflowResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"` // 每个工作流的取消结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelWorkflowResponse) Reset() {
	*x = BatchCancelWorkflowResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelWorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelWorkflowResponse) ProtoMessage() {}

func (x *BatchCancelWorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelWorkflowResponse.ProtoReflect.Descriptor instead.
func (*BatchCancelWorkflowResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{15}
}

func (x *BatchCancelWorkflowResponse) GetResults() []*BatchCancelWorkflowResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

// 批量创建定时任务请求
type BatchScheduleTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tasks         []*ScheduleTaskRequest `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"` // 需要创建的定时任务列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchScheduleTaskRequest) Reset() {
	*x = BatchScheduleTaskRequest{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchScheduleTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchScheduleTaskRequest) ProtoMessage() {}

func (x *BatchScheduleTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchScheduleTaskRequest.ProtoReflect.Descriptor instead.
func (*BatchScheduleTaskRequest) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{16}
}

func (x *BatchScheduleTaskRequest) GetTasks() []*ScheduleTaskRequest {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 批量创建定时任务响应
type BatchScheduleTaskResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Results       []*BatchScheduleTaskResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"` // 每个任务的创建结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchScheduleTaskResponse) Reset() {
	*x = BatchScheduleTaskResponse{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchScheduleTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchScheduleTaskResponse) ProtoMessage() {}

func (x *BatchScheduleTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchScheduleTaskResponse.ProtoReflect.Descriptor instead.
func (*BatchScheduleTaskResponse) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{17}
}

func (x *BatchScheduleTaskResponse) GetResults() []*BatchScheduleTaskResponse_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

type BatchCancelWorkflowResponse_Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`       // 工作流ID
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                              // 是否成功
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息(如果失败)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelWorkflowResponse_Result) Reset() {
	*x = BatchCancelWorkflowResponse_Result{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelWorkflowResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelWorkflowResponse_Result) ProtoMessage() {}

func (x *BatchCancelWorkflowResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelWorkflowResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchCancelWorkflowResponse_Result) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BatchCancelWorkflowResponse_Result) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *BatchCancelWorkflowResponse_Result) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchCancelWorkflowResponse_Result) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type BatchScheduleTaskResponse_Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                   // 任务ID
	WorkflowId    string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`       // 工作流ID
	RunId         string                 `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`                      // 运行ID
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`                              // 是否成功
	ErrorMessage  string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息(如果失败)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchScheduleTaskResponse_Result) Reset() {
	*x = BatchScheduleTaskResponse_Result{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchScheduleTaskResponse_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchScheduleTaskResponse_Result) ProtoMessage() {}

func (x *BatchScheduleTaskResponse_Result) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchScheduleTaskResponse_Result.ProtoReflect.Descriptor instead.
func (*BatchScheduleTaskResponse_Result) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{17, 0}
}

func (x *BatchScheduleTaskResponse_Result) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *BatchScheduleTaskResponse_Result) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *BatchScheduleTaskResponse_Result) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *BatchScheduleTaskResponse_Result) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchScheduleTaskResponse_Result) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_temporal_v1_temporal_proto protoreflect.FileDescriptor

const file_temporal_v1_temporal_proto_rawDesc = "" +
	"\n" +
	"\x1atemporal/v1/temporal.proto\x12\vtemporal.v1\"\r\n" +
	"\vTemporalReq\"\x0f\n" +
	"\rTemporalReply\"\xf2\x01\n" +
	"\x14StartWorkflowRequest\x12#\n" +
	"\rworkflow_type\x18\x01 \x01(\tR\fworkflowType\x12\x1d\n" +
	"\n" +
	"task_queue\x18\x02 \x01(\tR\ttaskQueue\x12\x1f\n" +
	"\vworkflow_id\x18\x03 \x01(\tR\n" +
	"workflowId\x12\x14\n" +
	"\x05input\x18\x04 \x01(\fR\x05input\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\x03R\x0etimeoutSeconds\x126\n" +
	"\aoptions\x18\x06 \x01(\v2\x1c.temporal.v1.WorkflowOptionsR\aoptions\"\xec\x01\n" +
	"\x0fWorkflowOptions\x12:\n" +
	"\x19execution_timeout_seconds\x18\x01 \x01(\x03R\x17executionTimeoutSeconds\x12.\n" +
	"\x13run_timeout_seconds\x18\x02 \x01(\x03R\x11runTimeoutSeconds\x120\n" +
	"\x14task_timeout_seconds\x18\x03 \x01(\x03R\x12taskTimeoutSeconds\x12;\n" +
	"\fretry_policy\x18\x04 \x03(\v2\x18.temporal.v1.RetryPolicyR\vretryPolicy\"\xdd\x01\n" +
	"\vRetryPolicy\x128\n" +
	"\x18initial_interval_seconds\x18\x01 \x01(\x03R\x16initialIntervalSeconds\x12/\n" +
	"\x13backoff_coefficient\x18\x02 \x01(\x01R\x12backoffCoefficient\x128\n" +
	"\x18maximum_interval_seconds\x18\x03 \x01(\x03R\x16maximumIntervalSeconds\x12)\n" +
	"\x10maximum_attempts\x18\x04 \x01(\x05R\x0fmaximumAttempts\"O\n" +
	"\x15StartWorkflowResponse\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"g\n" +
	"\x15CancelWorkflowRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"2\n" +
	"\x16CancelWorkflowResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"\x93\x01\n" +
	"\x15SignalWorkflowRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x1f\n" +
	"\vsignal_name\x18\x03 \x01(\tR\n" +
	"signalName\x12!\n" +
	"\fsignal_input\x18\x04 \x01(\fR\vsignalInput\"2\n" +
	"\x16SignalWorkflowResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\"U\n" +
	"\x1bGetWorkflowExecutionRequest\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"\xa1\x02\n" +
	"\x1cGetWorkflowExecutionResponse\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12<\n" +
	"\x06status\x18\x03 \x01(\x0e2$.temporal.v1.WorkflowExecutionStatusR\x06status\x12\x16\n" +
	"\x06result\x18\x04 \x01(\fR\x06result\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x12&\n" +
	"\x0fstart_time_unix\x18\x06 \x01(\x03R\rstartTimeUnix\x12&\n" +
	"\x0fclose_time_unix\x18\a \x01(\x03R\rcloseTimeUnix\"\xf5\x01\n" +
	"\x13ScheduleTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12:\n" +
	"\ttask_type\x18\x02 \x01(\x0e2\x1d.temporal.v1.ScheduleTaskTypeR\btaskType\x12#\n" +
	"\rdelay_seconds\x18\x03 \x01(\x03R\fdelaySeconds\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12P\n" +
	"\x12workflow_id_policy\x18\x05 \x01(\x0e2\".temporal.v1.WorkflowIdReusePolicyR\x10workflowIdPolicy\"N\n" +
	"\x14ScheduleTaskResponse\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\"^\n" +
	"\x1aBatchCancelWorkflowRequest\x12@\n" +
	"\tworkflows\x18\x01 \x03(\v2\".temporal.v1.CancelWorkflowRequestR\tworkflows\"\xd2\x01\n" +
	"\x1bBatchCancelWorkflowResponse\x12I\n" +
	"\aresults\x18\x01 \x03(\v2/.temporal.v1.BatchCancelWorkflowResponse.ResultR\aresults\x1ah\n" +
	"\x06Result\x12\x1f\n" +
	"\vworkflow_id\x18\x01 \x01(\tR\n" +
	"workflowId\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"R\n" +
	"\x18BatchScheduleTaskRequest\x126\n" +
	"\x05tasks\x18\x01 \x03(\v2 .temporal.v1.ScheduleTaskRequestR\x05tasks\"\xff\x01\n" +
	"\x19BatchScheduleTaskResponse\x12G\n" +
	"\aresults\x18\x01 \x03(\v2-.temporal.v1.BatchScheduleTaskResponse.ResultR\aresults\x1a\x98\x01\n" +
	"\x06Result\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12\x15\n" +
	"\x06run_id\x18\x03 \x01(\tR\x05runId\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage*V\n" +
	"\x10ScheduleTaskType\x12\r\n" +
	"\tUNDEFINED\x10\x00\x12\x18\n" +
	"\x14GRAYLIST_EXPIRE_TASK\x10\x01\x12\x19\n" +
	"\x15WHITELIST_EXPIRE_TASK\x10\x02*\xe5\x02\n" +
	"\x17WorkflowExecutionStatus\x12)\n" +
	"%WORKFLOW_EXECUTION_STATUS_UNSPECIFIED\x10\x00\x12%\n" +
	"!WORKFLOW_EXECUTION_STATUS_RUNNING\x10\x01\x12'\n" +
	"#WORKFLOW_EXECUTION_STATUS_COMPLETED\x10\x02\x12$\n" +
	" WORKFLOW_EXECUTION_STATUS_FAILED\x10\x03\x12&\n" +
	"\"WORKFLOW_EXECUTION_STATUS_CANCELED\x10\x04\x12(\n" +
	"$WORKFLOW_EXECUTION_STATUS_TERMINATED\x10\x05\x12.\n" +
	"*WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW\x10\x06\x12'\n" +
	"#WORKFLOW_EXECUTION_STATUS_TIMED_OUT\x10\a*\x8b\x02\n" +
	"\x15WorkflowIdReusePolicy\x12(\n" +
	"$WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED\x10\x00\x12,\n" +
	"(WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE\x10\x01\x128\n" +
	"4WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY\x10\x02\x12-\n" +
	")WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE\x10\x03\x121\n" +
	"-WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING\x10\x042\xc9\x05\n" +
	"\x0fTemporalService\x12X\n" +
	"\rStartWorkflow\x12!.temporal.v1.StartWorkflowRequest\x1a\".temporal.v1.StartWorkflowResponse\"\x00\x12[\n" +
	"\x0eCancelWorkflow\x12\".temporal.v1.CancelWorkflowRequest\x1a#.temporal.v1.CancelWorkflowResponse\"\x00\x12[\n" +
	"\x0eSignalWorkflow\x12\".temporal.v1.SignalWorkflowRequest\x1a#.temporal.v1.SignalWorkflowResponse\"\x00\x12m\n" +
	"\x14GetWorkflowExecution\x12(.temporal.v1.GetWorkflowExecutionRequest\x1a).temporal.v1.GetWorkflowExecutionResponse\"\x00\x12Z\n" +
	"\x11StartScheduleTask\x12 .temporal.v1.ScheduleTaskRequest\x1a!.temporal.v1.ScheduleTaskResponse\"\x00\x12k\n" +
	"\x14BatchCancelWorkflows\x12'.temporal.v1.BatchCancelWorkflowRequest\x1a(.temporal.v1.BatchCancelWorkflowResponse\"\x00\x12j\n" +
	"\x17BatchStartScheduleTasks\x12%.temporal.v1.BatchScheduleTaskRequest\x1a&.temporal.v1.BatchScheduleTaskResponse\"\x00B\tZ\a./pb/v1b\x06proto3"

var (
	file_temporal_v1_temporal_proto_rawDescOnce sync.Once
	file_temporal_v1_temporal_proto_rawDescData []byte
)

func file_temporal_v1_temporal_proto_rawDescGZIP() []byte {
	file_temporal_v1_temporal_proto_rawDescOnce.Do(func() {
		file_temporal_v1_temporal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_proto_rawDesc), len(file_temporal_v1_temporal_proto_rawDesc)))
	})
	return file_temporal_v1_temporal_proto_rawDescData
}

var file_temporal_v1_temporal_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_temporal_v1_temporal_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_temporal_v1_temporal_proto_goTypes = []any{
	(ScheduleTaskType)(0),                      // 0: temporal.v1.ScheduleTaskType
	(WorkflowExecutionStatus)(0),               // 1: temporal.v1.WorkflowExecutionStatus
	(WorkflowIdReusePolicy)(0),                 // 2: temporal.v1.WorkflowIdReusePolicy
	(*TemporalReq)(nil),                        // 3: temporal.v1.TemporalReq
	(*TemporalReply)(nil),                      // 4: temporal.v1.TemporalReply
	(*StartWorkflowRequest)(nil),               // 5: temporal.v1.StartWorkflowRequest
	(*WorkflowOptions)(nil),                    // 6: temporal.v1.WorkflowOptions
	(*RetryPolicy)(nil),                        // 7: temporal.v1.RetryPolicy
	(*StartWorkflowResponse)(nil),              // 8: temporal.v1.StartWorkflowResponse
	(*CancelWorkflowRequest)(nil),              // 9: temporal.v1.CancelWorkflowRequest
	(*CancelWorkflowResponse)(nil),             // 10: temporal.v1.CancelWorkflowResponse
	(*SignalWorkflowRequest)(nil),              // 11: temporal.v1.SignalWorkflowRequest
	(*SignalWorkflowResponse)(nil),             // 12: temporal.v1.SignalWorkflowResponse
	(*GetWorkflowExecutionRequest)(nil),        // 13: temporal.v1.GetWorkflowExecutionRequest
	(*GetWorkflowExecutionResponse)(nil),       // 14: temporal.v1.GetWorkflowExecutionResponse
	(*ScheduleTaskRequest)(nil),                // 15: temporal.v1.ScheduleTaskRequest
	(*ScheduleTaskResponse)(nil),               // 16: temporal.v1.ScheduleTaskResponse
	(*BatchCancelWorkflowRequest)(nil),         // 17: temporal.v1.BatchCancelWorkflowRequest
	(*BatchCancelWorkflowResponse)(nil),        // 18: temporal.v1.BatchCancelWorkflowResponse
	(*BatchScheduleTaskRequest)(nil),           // 19: temporal.v1.BatchScheduleTaskRequest
	(*BatchScheduleTaskResponse)(nil),          // 20: temporal.v1.BatchScheduleTaskResponse
	(*BatchCancelWorkflowResponse_Result)(nil), // 21: temporal.v1.BatchCancelWorkflowResponse.Result
	(*BatchScheduleTaskResponse_Result)(nil),   // 22: temporal.v1.BatchScheduleTaskResponse.Result
}
var file_temporal_v1_temporal_proto_depIdxs = []int32{
	6,  // 0: temporal.v1.StartWorkflowRequest.options:type_name -> temporal.v1.WorkflowOptions
	7,  // 1: temporal.v1.WorkflowOptions.retry_policy:type_name -> temporal.v1.RetryPolicy
	1,  // 2: temporal.v1.GetWorkflowExecutionResponse.status:type_name -> temporal.v1.WorkflowExecutionStatus
	0,  // 3: temporal.v1.ScheduleTaskRequest.task_type:type_name -> temporal.v1.ScheduleTaskType
	2,  // 4: temporal.v1.ScheduleTaskRequest.workflow_id_policy:type_name -> temporal.v1.WorkflowIdReusePolicy
	9,  // 5: temporal.v1.BatchCancelWorkflowRequest.workflows:type_name -> temporal.v1.CancelWorkflowRequest
	21, // 6: temporal.v1.BatchCancelWorkflowResponse.results:type_name -> temporal.v1.BatchCancelWorkflowResponse.Result
	15, // 7: temporal.v1.BatchScheduleTaskRequest.tasks:type_name -> temporal.v1.ScheduleTaskRequest
	22, // 8: temporal.v1.BatchScheduleTaskResponse.results:type_name -> temporal.v1.BatchScheduleTaskResponse.Result
	5,  // 9: temporal.v1.TemporalService.StartWorkflow:input_type -> temporal.v1.StartWorkflowRequest
	9,  // 10: temporal.v1.TemporalService.CancelWorkflow:input_type -> temporal.v1.CancelWorkflowRequest
	11, // 11: temporal.v1.TemporalService.SignalWorkflow:input_type -> temporal.v1.SignalWorkflowRequest
	13, // 12: temporal.v1.TemporalService.GetWorkflowExecution:input_type -> temporal.v1.GetWorkflowExecutionRequest
	15, // 13: temporal.v1.TemporalService.StartScheduleTask:input_type -> temporal.v1.ScheduleTaskRequest
	17, // 14: temporal.v1.TemporalService.BatchCancelWorkflows:input_type -> temporal.v1.BatchCancelWorkflowRequest
	19, // 15: temporal.v1.TemporalService.BatchStartScheduleTasks:input_type -> temporal.v1.BatchScheduleTaskRequest
	8,  // 16: temporal.v1.TemporalService.StartWorkflow:output_type -> temporal.v1.StartWorkflowResponse
	10, // 17: temporal.v1.TemporalService.CancelWorkflow:output_type -> temporal.v1.CancelWorkflowResponse
	12, // 18: temporal.v1.TemporalService.SignalWorkflow:output_type -> temporal.v1.SignalWorkflowResponse
	14, // 19: temporal.v1.TemporalService.GetWorkflowExecution:output_type -> temporal.v1.GetWorkflowExecutionResponse
	16, // 20: temporal.v1.TemporalService.StartScheduleTask:output_type -> temporal.v1.ScheduleTaskResponse
	18, // 21: temporal.v1.TemporalService.BatchCancelWorkflows:output_type -> temporal.v1.BatchCancelWorkflowResponse
	20, // 22: temporal.v1.TemporalService.BatchStartScheduleTasks:output_type -> temporal.v1.BatchScheduleTaskResponse
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_temporal_v1_temporal_proto_init() }
func file_temporal_v1_temporal_proto_init() {
	if File_temporal_v1_temporal_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_proto_rawDesc), len(file_temporal_v1_temporal_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_temporal_v1_temporal_proto_goTypes,
		DependencyIndexes: file_temporal_v1_temporal_proto_depIdxs,
		EnumInfos:         file_temporal_v1_temporal_proto_enumTypes,
		MessageInfos:      file_temporal_v1_temporal_proto_msgTypes,
	}.Build()
	File_temporal_v1_temporal_proto = out.File
	file_temporal_v1_temporal_proto_goTypes = nil
	file_temporal_v1_temporal_proto_depIdxs = nil
}
