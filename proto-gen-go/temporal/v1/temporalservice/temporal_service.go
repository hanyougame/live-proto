// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: temporal.proto

package temporalservice

import (
	"context"

	"github.com/hanyougame/live-proto/proto-gen-go/temporal/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BatchCancelWorkflowRequest         = v1.BatchCancelWorkflowRequest
	BatchCancelWorkflowResponse        = v1.BatchCancelWorkflowResponse
	BatchCancelWorkflowResponse_Result = v1.BatchCancelWorkflowResponse_Result
	BatchScheduleTaskRequest           = v1.BatchScheduleTaskRequest
	BatchScheduleTaskResponse          = v1.BatchScheduleTaskResponse
	BatchScheduleTaskResponse_Result   = v1.BatchScheduleTaskResponse_Result
	CancelWorkflowRequest              = v1.CancelWorkflowRequest
	CancelWorkflowResponse             = v1.CancelWorkflowResponse
	DeleteScheduleReq                  = v1.DeleteScheduleReq
	GetWorkflowExecutionRequest        = v1.GetWorkflowExecutionRequest
	GetWorkflowExecutionResponse       = v1.GetWorkflowExecutionResponse
	RetryPolicy                        = v1.RetryPolicy
	ScheduleCalendarSpec               = v1.ScheduleCalendarSpec
	ScheduleOptions                    = v1.ScheduleOptions
	ScheduleRange                      = v1.ScheduleRange
	ScheduleSpec                       = v1.ScheduleSpec
	ScheduleTaskRequest                = v1.ScheduleTaskRequest
	ScheduleTaskResponse               = v1.ScheduleTaskResponse
	ScheduleWorkflowAction             = v1.ScheduleWorkflowAction
	SignalWorkflowRequest              = v1.SignalWorkflowRequest
	SignalWorkflowResponse             = v1.SignalWorkflowResponse
	StartWorkflowRequest               = v1.StartWorkflowRequest
	StartWorkflowResponse              = v1.StartWorkflowResponse
	TemporalReply                      = v1.TemporalReply
	TemporalReq                        = v1.TemporalReq
	WorkflowOptions                    = v1.WorkflowOptions

	TemporalService interface {
		// 启动工作流
		StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error)
		// 取消工作流
		CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error)
		// 发送信号到工作流
		SignalWorkflow(ctx context.Context, in *SignalWorkflowRequest, opts ...grpc.CallOption) (*SignalWorkflowResponse, error)
		// 获取工作流执行状态
		GetWorkflowExecution(ctx context.Context, in *GetWorkflowExecutionRequest, opts ...grpc.CallOption) (*GetWorkflowExecutionResponse, error)
		// 创建定时任务
		StartScheduleTask(ctx context.Context, in *ScheduleTaskRequest, opts ...grpc.CallOption) (*ScheduleTaskResponse, error)
		// 批量取消工作流
		BatchCancelWorkflows(ctx context.Context, in *BatchCancelWorkflowRequest, opts ...grpc.CallOption) (*BatchCancelWorkflowResponse, error)
		// 批量创建定时任务
		BatchStartScheduleTasks(ctx context.Context, in *BatchScheduleTaskRequest, opts ...grpc.CallOption) (*BatchScheduleTaskResponse, error)
		// 创建自定义调度
		CreateSchedule(ctx context.Context, in *ScheduleOptions, opts ...grpc.CallOption) (*TemporalReply, error)
		// 删除自定义调度
		DeleteSchedule(ctx context.Context, in *DeleteScheduleReq, opts ...grpc.CallOption) (*TemporalReply, error)
	}

	defaultTemporalService struct {
		cli zrpc.Client
	}
)

func NewTemporalService(cli zrpc.Client) TemporalService {
	return &defaultTemporalService{
		cli: cli,
	}
}

// 启动工作流
func (m *defaultTemporalService) StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.StartWorkflow(ctx, in, opts...)
}

// 取消工作流
func (m *defaultTemporalService) CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.CancelWorkflow(ctx, in, opts...)
}

// 发送信号到工作流
func (m *defaultTemporalService) SignalWorkflow(ctx context.Context, in *SignalWorkflowRequest, opts ...grpc.CallOption) (*SignalWorkflowResponse, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.SignalWorkflow(ctx, in, opts...)
}

// 获取工作流执行状态
func (m *defaultTemporalService) GetWorkflowExecution(ctx context.Context, in *GetWorkflowExecutionRequest, opts ...grpc.CallOption) (*GetWorkflowExecutionResponse, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.GetWorkflowExecution(ctx, in, opts...)
}

// 创建定时任务
func (m *defaultTemporalService) StartScheduleTask(ctx context.Context, in *ScheduleTaskRequest, opts ...grpc.CallOption) (*ScheduleTaskResponse, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.StartScheduleTask(ctx, in, opts...)
}

// 批量取消工作流
func (m *defaultTemporalService) BatchCancelWorkflows(ctx context.Context, in *BatchCancelWorkflowRequest, opts ...grpc.CallOption) (*BatchCancelWorkflowResponse, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.BatchCancelWorkflows(ctx, in, opts...)
}

// 批量创建定时任务
func (m *defaultTemporalService) BatchStartScheduleTasks(ctx context.Context, in *BatchScheduleTaskRequest, opts ...grpc.CallOption) (*BatchScheduleTaskResponse, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.BatchStartScheduleTasks(ctx, in, opts...)
}

// 创建自定义调度
func (m *defaultTemporalService) CreateSchedule(ctx context.Context, in *ScheduleOptions, opts ...grpc.CallOption) (*TemporalReply, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.CreateSchedule(ctx, in, opts...)
}

// 删除自定义调度
func (m *defaultTemporalService) DeleteSchedule(ctx context.Context, in *DeleteScheduleReq, opts ...grpc.CallOption) (*TemporalReply, error) {
	client := v1.NewTemporalServiceClient(m.cli.Conn())
	return client.DeleteSchedule(ctx, in, opts...)
}
