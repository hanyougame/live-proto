// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: finance/v1/finance.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PayInStatus int32

const (
	// none
	PayInStatus_PAY_IN_NONE PayInStatus = 0
	// 支付成功
	PayInStatus_PAY_IN_SUCCESS PayInStatus = 1
	// 支付失败
	PayInStatus_PAY_IN_FAIL PayInStatus = 2
	// 支付超时
	PayInStatus_PAY_IN_TIMEOUT PayInStatus = 3
	// 待支付
	PayInStatus_PAY_IN_WAIT PayInStatus = 4
)

// Enum value maps for PayInStatus.
var (
	PayInStatus_name = map[int32]string{
		0: "PAY_IN_NONE",
		1: "PAY_IN_SUCCESS",
		2: "PAY_IN_FAIL",
		3: "PAY_IN_TIMEOUT",
		4: "PAY_IN_WAIT",
	}
	PayInStatus_value = map[string]int32{
		"PAY_IN_NONE":    0,
		"PAY_IN_SUCCESS": 1,
		"PAY_IN_FAIL":    2,
		"PAY_IN_TIMEOUT": 3,
		"PAY_IN_WAIT":    4,
	}
)

func (x PayInStatus) Enum() *PayInStatus {
	p := new(PayInStatus)
	*p = x
	return p
}

func (x PayInStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayInStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_finance_v1_finance_proto_enumTypes[0].Descriptor()
}

func (PayInStatus) Type() protoreflect.EnumType {
	return &file_finance_v1_finance_proto_enumTypes[0]
}

func (x PayInStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayInStatus.Descriptor instead.
func (PayInStatus) EnumDescriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{0}
}

type PayOutStatus int32

const (
	// none
	PayOutStatus_PAY_OUT_NONE PayOutStatus = 0
	// 出款成功
	PayOutStatus_PAY_OUT_SUCCESS PayOutStatus = 1
	// 出款失败
	PayOutStatus_PAY_OUT_FAIL PayOutStatus = 2
	// 出款超时
	PayOutStatus_PAY_OUT_TIMEOUT PayOutStatus = 3
	// 待出款
	PayOutStatus_PAY_OUT_WAIT PayOutStatus = 4
)

// Enum value maps for PayOutStatus.
var (
	PayOutStatus_name = map[int32]string{
		0: "PAY_OUT_NONE",
		1: "PAY_OUT_SUCCESS",
		2: "PAY_OUT_FAIL",
		3: "PAY_OUT_TIMEOUT",
		4: "PAY_OUT_WAIT",
	}
	PayOutStatus_value = map[string]int32{
		"PAY_OUT_NONE":    0,
		"PAY_OUT_SUCCESS": 1,
		"PAY_OUT_FAIL":    2,
		"PAY_OUT_TIMEOUT": 3,
		"PAY_OUT_WAIT":    4,
	}
)

func (x PayOutStatus) Enum() *PayOutStatus {
	p := new(PayOutStatus)
	*p = x
	return p
}

func (x PayOutStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayOutStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_finance_v1_finance_proto_enumTypes[1].Descriptor()
}

func (PayOutStatus) Type() protoreflect.EnumType {
	return &file_finance_v1_finance_proto_enumTypes[1]
}

func (x PayOutStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayOutStatus.Descriptor instead.
func (PayOutStatus) EnumDescriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{1}
}

type AuditType int32

const (
	AuditType_AuditTypeNone             AuditType = 0
	AuditType_AuditTypeRecharge         AuditType = 1  // 充值
	AuditType_AuditTypeWithdraw         AuditType = 2  // 提现
	AuditType_AuditTypeSettlement       AuditType = 3  // 银商结算
	AuditType_AuditTypeCorrect          AuditType = 4  // 资金修正
	AuditType_AuditTypeActivity         AuditType = 5  // 优惠活动
	AuditType_AuditTypeRefund           AuditType = 6  // 返水
	AuditType_AuditTypeCommission       AuditType = 7  // 返佣
	AuditType_AuditTypeInterest         AuditType = 8  // 利息宝
	AuditType_AuditTypeTask             AuditType = 9  // 任务
	AuditType_AuditTypeVip              AuditType = 10 // VIP奖励
	AuditType_AuditTypeRechargeDiscount AuditType = 11 // 充值优惠
	AuditType_AuditTypeClub             AuditType = 12 // 俱乐部
	AuditType_AuditTypeGuarantee        AuditType = 13 // 担保理赔
	AuditType_AuditTypeSystem           AuditType = 14 // 系统稽核
	AuditType_AuditTypeAccumulationFund AuditType = 15 // 公积金
	AuditType_AuditTypeBox              AuditType = 16 // 盲盒抽奖
)

// Enum value maps for AuditType.
var (
	AuditType_name = map[int32]string{
		0:  "AuditTypeNone",
		1:  "AuditTypeRecharge",
		2:  "AuditTypeWithdraw",
		3:  "AuditTypeSettlement",
		4:  "AuditTypeCorrect",
		5:  "AuditTypeActivity",
		6:  "AuditTypeRefund",
		7:  "AuditTypeCommission",
		8:  "AuditTypeInterest",
		9:  "AuditTypeTask",
		10: "AuditTypeVip",
		11: "AuditTypeRechargeDiscount",
		12: "AuditTypeClub",
		13: "AuditTypeGuarantee",
		14: "AuditTypeSystem",
		15: "AuditTypeAccumulationFund",
		16: "AuditTypeBox",
	}
	AuditType_value = map[string]int32{
		"AuditTypeNone":             0,
		"AuditTypeRecharge":         1,
		"AuditTypeWithdraw":         2,
		"AuditTypeSettlement":       3,
		"AuditTypeCorrect":          4,
		"AuditTypeActivity":         5,
		"AuditTypeRefund":           6,
		"AuditTypeCommission":       7,
		"AuditTypeInterest":         8,
		"AuditTypeTask":             9,
		"AuditTypeVip":              10,
		"AuditTypeRechargeDiscount": 11,
		"AuditTypeClub":             12,
		"AuditTypeGuarantee":        13,
		"AuditTypeSystem":           14,
		"AuditTypeAccumulationFund": 15,
		"AuditTypeBox":              16,
	}
)

func (x AuditType) Enum() *AuditType {
	p := new(AuditType)
	*p = x
	return p
}

func (x AuditType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditType) Descriptor() protoreflect.EnumDescriptor {
	return file_finance_v1_finance_proto_enumTypes[2].Descriptor()
}

func (AuditType) Type() protoreflect.EnumType {
	return &file_finance_v1_finance_proto_enumTypes[2]
}

func (x AuditType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditType.Descriptor instead.
func (AuditType) EnumDescriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{2}
}

type AuditSubType int32

const (
	AuditSubType_AuditSubTypeNone                               AuditSubType = 0   // 无
	AuditSubType_AuditSubTypeUalaTransfer                       AuditSubType = 1   // Ualá转账
	AuditSubType_AuditSubTypeMercadoPagoTransfer                AuditSubType = 2   // Mercado Pago转账
	AuditSubType_AuditSubTypeUpdayTransfer                      AuditSubType = 3   // UPDAY转账
	AuditSubType_AuditSubTypeQQWallet                           AuditSubType = 4   // QQ钱包
	AuditSubType_AuditSubTypeWalletRecharge                     AuditSubType = 5   // 钱包充值
	AuditSubType_AuditSubTypeNagadTransfer                      AuditSubType = 6   // Nagad转账
	AuditSubType_AuditSubTypeBankCardTransfer                   AuditSubType = 7   // 银行卡转账
	AuditSubType_AuditSubTypeUpiTransfer                        AuditSubType = 8   // UPI转账
	AuditSubType_AuditSubTypeGrabPayTransfer                    AuditSubType = 9   // GrabPay转账
	AuditSubType_AuditSubTypeLinkajaTransfer                    AuditSubType = 10  // LINKAJA转账
	AuditSubType_AuditSubTypePagaTransfer                       AuditSubType = 11  // Paga转账
	AuditSubType_AuditSubTypeFlutterwaveTransfer                AuditSubType = 12  // Flutterwave转账
	AuditSubType_AuditSubTypePaystackTransfer                   AuditSubType = 13  // Paystack转账
	AuditSubType_AuditSubTypeInterswitchTransfer                AuditSubType = 14  // Interswitch转账
	AuditSubType_AuditSubTypeOpayTransfer                       AuditSubType = 15  // Opay转账
	AuditSubType_AuditSubTypeCellulantTransfer                  AuditSubType = 16  // Cellulant转账
	AuditSubType_AuditSubTypeKongapayTransfer                   AuditSubType = 17  // Kongapay转账
	AuditSubType_AuditSubTypeLinePayTransfer                    AuditSubType = 18  // LinePay转账
	AuditSubType_AuditSubTypeApplePayTransfer                   AuditSubType = 19  // ApplePay转账
	AuditSubType_AuditSubTypeAlipayRecharge                     AuditSubType = 20  // 支付宝充值
	AuditSubType_AuditSubTypeAlipayApp                          AuditSubType = 21  // 支付宝app
	AuditSubType_AuditSubTypeUpaisaTransfer                     AuditSubType = 22  // Upaisa转账
	AuditSubType_AuditSubTypeKbzPayTransfer                     AuditSubType = 23  // KBZPay转账
	AuditSubType_AuditSubTypeWeChatTransfer                     AuditSubType = 24  // 微信转账
	AuditSubType_AuditSubTypeWeChatRecharge                     AuditSubType = 25  // 微信充值
	AuditSubType_AuditSubTypeGcashTransfer                      AuditSubType = 26  // GCASH转账
	AuditSubType_AuditSubTypeClabeTransfer                      AuditSubType = 27  // CLABE转账
	AuditSubType_AuditSubTypeTossTransfer                       AuditSubType = 28  // Toss转账
	AuditSubType_AuditSubTypeDokuTransfer                       AuditSubType = 29  // DOKU转账
	AuditSubType_AuditSubTypeJDWallet                           AuditSubType = 30  // 京东钱包
	AuditSubType_AuditSubTypeCardRecharge                       AuditSubType = 31  // 点卡充值
	AuditSubType_AuditSubTypePixTransfer                        AuditSubType = 32  // PIX转账
	AuditSubType_AuditSubTypeHuiWangTransfer                    AuditSubType = 33  // 汇旺转账
	AuditSubType_AuditSubTypeOvoTransfer                        AuditSubType = 34  // OVO转账
	AuditSubType_AuditSubTypeMomoTransfer                       AuditSubType = 35  // MoMo转账
	AuditSubType_AuditSubTypeThirdPartyWalletTransfer           AuditSubType = 36  // 三方钱包转账
	AuditSubType_AuditSubTypeEasypaisaTransfer                  AuditSubType = 37  // Easypaisa转账
	AuditSubType_AuditSubTypeAlipayTransfer                     AuditSubType = 38  // 支付宝转账
	AuditSubType_AuditSubTypeVirtualCurrencyTransfer            AuditSubType = 39  // 虚拟币转账
	AuditSubType_AuditSubTypeGopayTransfer                      AuditSubType = 40  // GOPAY转账
	AuditSubType_AuditSubTypeJazzCashTransfer                   AuditSubType = 41  // JazzCash转账
	AuditSubType_AuditSubTypeBaiduWallet                        AuditSubType = 42  // 百度钱包
	AuditSubType_AuditSubTypeZaloTransfer                       AuditSubType = 43  // ZaLo转账
	AuditSubType_AuditSubTypeRocketTransfer                     AuditSubType = 44  // Rocket转账
	AuditSubType_AuditSubTypeBkashTransfer                      AuditSubType = 45  // bKash转账
	AuditSubType_AuditSubTypePalmPayTransfer                    AuditSubType = 46  // PalmPay转账
	AuditSubType_AuditSubTypeMaximumMobileTransfer              AuditSubType = 47  // MaximumMobile转账
	AuditSubType_AuditSubTypeBkmExpressTransfer                 AuditSubType = 48  // BKMExpress转账
	AuditSubType_AuditSubTypeFastPayTransfer                    AuditSubType = 49  // FastPay转账
	AuditSubType_AuditSubTypeKakaoPayTransfer                   AuditSubType = 50  // KakaoPay转账
	AuditSubType_AuditSubTypePaycoTransfer                      AuditSubType = 51  // Payco转账
	AuditSubType_AuditSubTypeSureCashTransfer                   AuditSubType = 52  // SureCash转账
	AuditSubType_AuditSubTypeCustomerServiceRecharge            AuditSubType = 53  // 客服充值
	AuditSubType_AuditSubTypeOnlineRecharge                     AuditSubType = 54  // 在线充值
	AuditSubType_AuditSubTypeGotymeBankTransfer                 AuditSubType = 55  // GoTyme Bank转账
	AuditSubType_AuditSubTypeWaveMoneyTransfer                  AuditSubType = 56  // Wave Money转账
	AuditSubType_AuditSubTypeBankRecharge                       AuditSubType = 57  // 银行充值
	AuditSubType_AuditSubTypePaymayaTransfer                    AuditSubType = 58  // PayMaya转账
	AuditSubType_AuditSubTypeSamsungPayTransfer                 AuditSubType = 59  // SamsungPay转账
	AuditSubType_AuditSubTypeNaverPayTransfer                   AuditSubType = 60  // NaverPay转账
	AuditSubType_AuditSubTypeSmilePayTransfer                   AuditSubType = 61  // SmilePay转账
	AuditSubType_AuditSubTypeDanaTransfer                       AuditSubType = 62  // DANA转账
	AuditSubType_AuditSubTypeTodoPagoTransfer                   AuditSubType = 63  // Todo Pago转账
	AuditSubType_AuditSubTypeWithdrawalFreeze                   AuditSubType = 64  // 提现冻结
	AuditSubType_AuditSubTypeWithdrawalRejection                AuditSubType = 65  // 提现拒绝
	AuditSubType_AuditSubTypeWithdrawalUnfreeze                 AuditSubType = 66  // 提现解冻
	AuditSubType_AuditSubTypeWithdrawalSuccess                  AuditSubType = 67  // 提现成功
	AuditSubType_AuditSubTypeTransferToOthers                   AuditSubType = 68  // 转账给他人
	AuditSubType_AuditSubTypeSilverMerchantAddFunds             AuditSubType = 69  // 银商加款
	AuditSubType_AuditSubTypeSilverMerchantRecharge             AuditSubType = 70  // 银商充值
	AuditSubType_AuditSubTypeSilverMerchantGiftMembershipAmount AuditSubType = 71  // 银商赠送会员金额
	AuditSubType_AuditSubTypeSilverMerchantDeduction            AuditSubType = 72  // 银商扣款
	AuditSubType_AuditSubTypeManualAddFunds                     AuditSubType = 73  // 人工加款
	AuditSubType_AuditSubTypeManualOrderCompletion              AuditSubType = 74  // 手动补单
	AuditSubType_AuditSubTypeNegativeBalanceCorrection          AuditSubType = 75  // 修正负数余额
	AuditSubType_AuditSubTypeRewardManualAddFunds               AuditSubType = 76  // 奖励手动加款
	AuditSubType_AuditSubTypeManualDeduction                    AuditSubType = 77  // 手动扣款
	AuditSubType_AuditSubTypeDeductionOfAllAssets               AuditSubType = 78  // 扣除全部资产
	AuditSubType_AuditSubTypeRecoveryDeduction                  AuditSubType = 79  // 追缴扣除
	AuditSubType_AuditSubTypeManualPullBack                     AuditSubType = 80  // 人工拉回
	AuditSubType_AuditSubTypeDeductionOfExcessProfit            AuditSubType = 81  // 扣除超额盈利
	AuditSubType_AuditSubTypeAgentActivity                      AuditSubType = 82  // 代理活动
	AuditSubType_AuditSubTypeLuckyBetActivity                   AuditSubType = 83  // 幸运注单活动
	AuditSubType_AuditSubTypeInvestmentActivity                 AuditSubType = 84  // 投资活动
	AuditSubType_AuditSubTypeNewMemberBonus                     AuditSubType = 85  // 新人彩金
	AuditSubType_AuditSubTypeRescueFundActivity                 AuditSubType = 86  // 救援金活动
	AuditSubType_AuditSubTypePromotionActivity                  AuditSubType = 87  // 推广活动
	AuditSubType_AuditSubTypeRewardFeedback                     AuditSubType = 88  // 有奖反馈
	AuditSubType_AuditSubTypeRedPacketActivity                  AuditSubType = 89  // 红包活动
	AuditSubType_AuditSubTypeInvestmentDeduction                AuditSubType = 90  // 投资扣款
	AuditSubType_AuditSubTypeSigninActivity                     AuditSubType = 91  // 签到活动
	AuditSubType_AuditSubTypeRechargeActivity                   AuditSubType = 92  // 充值活动
	AuditSubType_AuditSubTypeCuttingActivity                    AuditSubType = 93  // 打码活动
	AuditSubType_AuditSubTypeLotteryAssistanceActivity          AuditSubType = 94  // 抽奖助力活动
	AuditSubType_AuditSubTypeRankingActivity                    AuditSubType = 95  // 排行榜活动
	AuditSubType_AuditSubTypeCustomActivity                     AuditSubType = 96  // 自定义活动
	AuditSubType_AuditSubTypeCutOne                             AuditSubType = 97  // 砍一刀
	AuditSubType_AuditSubTypeLotteryWheelActivity               AuditSubType = 98  // 转盘活动
	AuditSubType_AuditSubTypeChannelReward                      AuditSubType = 99  // 渠道奖励
	AuditSubType_AuditSubTypeWordCollectionActivity             AuditSubType = 100 // 集字活动
	AuditSubType_AuditSubTypeGuessActivity                      AuditSubType = 101 // 竞猜活动
	AuditSubType_AuditSubTypeWaterReturn                        AuditSubType = 102 // 返水领取
	AuditSubType_AuditSubTypeCommissionIssuance                 AuditSubType = 103 // 发放佣金
	AuditSubType_AuditSubTypeCommissionCollection               AuditSubType = 104 // 领取佣金
	AuditSubType_AuditSubTypeInterestTreasureIncome             AuditSubType = 105 // 利息宝收益
	AuditSubType_AuditSubTypeHallToInterestTreasure             AuditSubType = 106 // 大厅转入利息宝
	AuditSubType_AuditSubTypeManualPullBackInterestTreasure     AuditSubType = 107 // 手动拉回-利息宝
	AuditSubType_AuditSubTypeInterestTreasureToHall             AuditSubType = 108 // 利息宝转到大厅
	AuditSubType_AuditSubTypeDailyTask                          AuditSubType = 109 // 每日任务
	AuditSubType_AuditSubTypeWeeklyTask                         AuditSubType = 110 // 每周任务
	AuditSubType_AuditSubTypeNewbieWelfare                      AuditSubType = 111 // 新人福利
	AuditSubType_AuditSubTypeActivityBox                        AuditSubType = 112 // 活跃度宝箱
	AuditSubType_AuditSubTypeMysteriousTask                     AuditSubType = 113 // 神秘任务
	AuditSubType_AuditSubTypeVipMonthlyBonus                    AuditSubType = 114 // VIP月奖金
	AuditSubType_AuditSubTypeVipDailyReward                     AuditSubType = 115 // VIP日奖励
	AuditSubType_AuditSubTypeVipWeeklyBonus                     AuditSubType = 116 // VIP周奖金
	AuditSubType_AuditSubTypeVipPromotionBonus                  AuditSubType = 117 // VIP晋级奖金
	AuditSubType_AuditSubTypeDiscount                           AuditSubType = 118 // 优惠
	AuditSubType_AuditSubTypeManualPullBackClub                 AuditSubType = 119 // 手动拉回-俱乐部
	AuditSubType_AuditSubTypeHallToClub                         AuditSubType = 120 // 大厅转入俱乐部
	AuditSubType_AuditSubTypeClubToHall                         AuditSubType = 121 // 俱乐部转到大厅
	AuditSubType_AuditSubTypeClaimFreeze                        AuditSubType = 122 // 理赔冻结
	AuditSubType_AuditSubTypeClaimUnfreeze                      AuditSubType = 123 // 理赔解冻
	AuditSubType_AuditSubTypeClaimFee                           AuditSubType = 124 // 理赔手续费
	AuditSubType_AuditSubTypeClaimAddPoints                     AuditSubType = 125 // 理赔上分
	AuditSubType_AuditSubTypeClaimSubtractPoints                AuditSubType = 126 // 理赔下分
	AuditSubType_AuditSubTypeAudit                              AuditSubType = 127 // 稽核
	AuditSubType_AuditSubTypePublicFundCollection               AuditSubType = 128 // 公积金领取
	AuditSubType_AuditSubTypeBlindBoxLotteryDeduction           AuditSubType = 129 // 盲盒抽奖扣除
	AuditSubType_AuditSubTypeBlindBoxLotteryReward              AuditSubType = 130 // 盲盒抽奖奖励
)

// Enum value maps for AuditSubType.
var (
	AuditSubType_name = map[int32]string{
		0:   "AuditSubTypeNone",
		1:   "AuditSubTypeUalaTransfer",
		2:   "AuditSubTypeMercadoPagoTransfer",
		3:   "AuditSubTypeUpdayTransfer",
		4:   "AuditSubTypeQQWallet",
		5:   "AuditSubTypeWalletRecharge",
		6:   "AuditSubTypeNagadTransfer",
		7:   "AuditSubTypeBankCardTransfer",
		8:   "AuditSubTypeUpiTransfer",
		9:   "AuditSubTypeGrabPayTransfer",
		10:  "AuditSubTypeLinkajaTransfer",
		11:  "AuditSubTypePagaTransfer",
		12:  "AuditSubTypeFlutterwaveTransfer",
		13:  "AuditSubTypePaystackTransfer",
		14:  "AuditSubTypeInterswitchTransfer",
		15:  "AuditSubTypeOpayTransfer",
		16:  "AuditSubTypeCellulantTransfer",
		17:  "AuditSubTypeKongapayTransfer",
		18:  "AuditSubTypeLinePayTransfer",
		19:  "AuditSubTypeApplePayTransfer",
		20:  "AuditSubTypeAlipayRecharge",
		21:  "AuditSubTypeAlipayApp",
		22:  "AuditSubTypeUpaisaTransfer",
		23:  "AuditSubTypeKbzPayTransfer",
		24:  "AuditSubTypeWeChatTransfer",
		25:  "AuditSubTypeWeChatRecharge",
		26:  "AuditSubTypeGcashTransfer",
		27:  "AuditSubTypeClabeTransfer",
		28:  "AuditSubTypeTossTransfer",
		29:  "AuditSubTypeDokuTransfer",
		30:  "AuditSubTypeJDWallet",
		31:  "AuditSubTypeCardRecharge",
		32:  "AuditSubTypePixTransfer",
		33:  "AuditSubTypeHuiWangTransfer",
		34:  "AuditSubTypeOvoTransfer",
		35:  "AuditSubTypeMomoTransfer",
		36:  "AuditSubTypeThirdPartyWalletTransfer",
		37:  "AuditSubTypeEasypaisaTransfer",
		38:  "AuditSubTypeAlipayTransfer",
		39:  "AuditSubTypeVirtualCurrencyTransfer",
		40:  "AuditSubTypeGopayTransfer",
		41:  "AuditSubTypeJazzCashTransfer",
		42:  "AuditSubTypeBaiduWallet",
		43:  "AuditSubTypeZaloTransfer",
		44:  "AuditSubTypeRocketTransfer",
		45:  "AuditSubTypeBkashTransfer",
		46:  "AuditSubTypePalmPayTransfer",
		47:  "AuditSubTypeMaximumMobileTransfer",
		48:  "AuditSubTypeBkmExpressTransfer",
		49:  "AuditSubTypeFastPayTransfer",
		50:  "AuditSubTypeKakaoPayTransfer",
		51:  "AuditSubTypePaycoTransfer",
		52:  "AuditSubTypeSureCashTransfer",
		53:  "AuditSubTypeCustomerServiceRecharge",
		54:  "AuditSubTypeOnlineRecharge",
		55:  "AuditSubTypeGotymeBankTransfer",
		56:  "AuditSubTypeWaveMoneyTransfer",
		57:  "AuditSubTypeBankRecharge",
		58:  "AuditSubTypePaymayaTransfer",
		59:  "AuditSubTypeSamsungPayTransfer",
		60:  "AuditSubTypeNaverPayTransfer",
		61:  "AuditSubTypeSmilePayTransfer",
		62:  "AuditSubTypeDanaTransfer",
		63:  "AuditSubTypeTodoPagoTransfer",
		64:  "AuditSubTypeWithdrawalFreeze",
		65:  "AuditSubTypeWithdrawalRejection",
		66:  "AuditSubTypeWithdrawalUnfreeze",
		67:  "AuditSubTypeWithdrawalSuccess",
		68:  "AuditSubTypeTransferToOthers",
		69:  "AuditSubTypeSilverMerchantAddFunds",
		70:  "AuditSubTypeSilverMerchantRecharge",
		71:  "AuditSubTypeSilverMerchantGiftMembershipAmount",
		72:  "AuditSubTypeSilverMerchantDeduction",
		73:  "AuditSubTypeManualAddFunds",
		74:  "AuditSubTypeManualOrderCompletion",
		75:  "AuditSubTypeNegativeBalanceCorrection",
		76:  "AuditSubTypeRewardManualAddFunds",
		77:  "AuditSubTypeManualDeduction",
		78:  "AuditSubTypeDeductionOfAllAssets",
		79:  "AuditSubTypeRecoveryDeduction",
		80:  "AuditSubTypeManualPullBack",
		81:  "AuditSubTypeDeductionOfExcessProfit",
		82:  "AuditSubTypeAgentActivity",
		83:  "AuditSubTypeLuckyBetActivity",
		84:  "AuditSubTypeInvestmentActivity",
		85:  "AuditSubTypeNewMemberBonus",
		86:  "AuditSubTypeRescueFundActivity",
		87:  "AuditSubTypePromotionActivity",
		88:  "AuditSubTypeRewardFeedback",
		89:  "AuditSubTypeRedPacketActivity",
		90:  "AuditSubTypeInvestmentDeduction",
		91:  "AuditSubTypeSigninActivity",
		92:  "AuditSubTypeRechargeActivity",
		93:  "AuditSubTypeCuttingActivity",
		94:  "AuditSubTypeLotteryAssistanceActivity",
		95:  "AuditSubTypeRankingActivity",
		96:  "AuditSubTypeCustomActivity",
		97:  "AuditSubTypeCutOne",
		98:  "AuditSubTypeLotteryWheelActivity",
		99:  "AuditSubTypeChannelReward",
		100: "AuditSubTypeWordCollectionActivity",
		101: "AuditSubTypeGuessActivity",
		102: "AuditSubTypeWaterReturn",
		103: "AuditSubTypeCommissionIssuance",
		104: "AuditSubTypeCommissionCollection",
		105: "AuditSubTypeInterestTreasureIncome",
		106: "AuditSubTypeHallToInterestTreasure",
		107: "AuditSubTypeManualPullBackInterestTreasure",
		108: "AuditSubTypeInterestTreasureToHall",
		109: "AuditSubTypeDailyTask",
		110: "AuditSubTypeWeeklyTask",
		111: "AuditSubTypeNewbieWelfare",
		112: "AuditSubTypeActivityBox",
		113: "AuditSubTypeMysteriousTask",
		114: "AuditSubTypeVipMonthlyBonus",
		115: "AuditSubTypeVipDailyReward",
		116: "AuditSubTypeVipWeeklyBonus",
		117: "AuditSubTypeVipPromotionBonus",
		118: "AuditSubTypeDiscount",
		119: "AuditSubTypeManualPullBackClub",
		120: "AuditSubTypeHallToClub",
		121: "AuditSubTypeClubToHall",
		122: "AuditSubTypeClaimFreeze",
		123: "AuditSubTypeClaimUnfreeze",
		124: "AuditSubTypeClaimFee",
		125: "AuditSubTypeClaimAddPoints",
		126: "AuditSubTypeClaimSubtractPoints",
		127: "AuditSubTypeAudit",
		128: "AuditSubTypePublicFundCollection",
		129: "AuditSubTypeBlindBoxLotteryDeduction",
		130: "AuditSubTypeBlindBoxLotteryReward",
	}
	AuditSubType_value = map[string]int32{
		"AuditSubTypeNone":                               0,
		"AuditSubTypeUalaTransfer":                       1,
		"AuditSubTypeMercadoPagoTransfer":                2,
		"AuditSubTypeUpdayTransfer":                      3,
		"AuditSubTypeQQWallet":                           4,
		"AuditSubTypeWalletRecharge":                     5,
		"AuditSubTypeNagadTransfer":                      6,
		"AuditSubTypeBankCardTransfer":                   7,
		"AuditSubTypeUpiTransfer":                        8,
		"AuditSubTypeGrabPayTransfer":                    9,
		"AuditSubTypeLinkajaTransfer":                    10,
		"AuditSubTypePagaTransfer":                       11,
		"AuditSubTypeFlutterwaveTransfer":                12,
		"AuditSubTypePaystackTransfer":                   13,
		"AuditSubTypeInterswitchTransfer":                14,
		"AuditSubTypeOpayTransfer":                       15,
		"AuditSubTypeCellulantTransfer":                  16,
		"AuditSubTypeKongapayTransfer":                   17,
		"AuditSubTypeLinePayTransfer":                    18,
		"AuditSubTypeApplePayTransfer":                   19,
		"AuditSubTypeAlipayRecharge":                     20,
		"AuditSubTypeAlipayApp":                          21,
		"AuditSubTypeUpaisaTransfer":                     22,
		"AuditSubTypeKbzPayTransfer":                     23,
		"AuditSubTypeWeChatTransfer":                     24,
		"AuditSubTypeWeChatRecharge":                     25,
		"AuditSubTypeGcashTransfer":                      26,
		"AuditSubTypeClabeTransfer":                      27,
		"AuditSubTypeTossTransfer":                       28,
		"AuditSubTypeDokuTransfer":                       29,
		"AuditSubTypeJDWallet":                           30,
		"AuditSubTypeCardRecharge":                       31,
		"AuditSubTypePixTransfer":                        32,
		"AuditSubTypeHuiWangTransfer":                    33,
		"AuditSubTypeOvoTransfer":                        34,
		"AuditSubTypeMomoTransfer":                       35,
		"AuditSubTypeThirdPartyWalletTransfer":           36,
		"AuditSubTypeEasypaisaTransfer":                  37,
		"AuditSubTypeAlipayTransfer":                     38,
		"AuditSubTypeVirtualCurrencyTransfer":            39,
		"AuditSubTypeGopayTransfer":                      40,
		"AuditSubTypeJazzCashTransfer":                   41,
		"AuditSubTypeBaiduWallet":                        42,
		"AuditSubTypeZaloTransfer":                       43,
		"AuditSubTypeRocketTransfer":                     44,
		"AuditSubTypeBkashTransfer":                      45,
		"AuditSubTypePalmPayTransfer":                    46,
		"AuditSubTypeMaximumMobileTransfer":              47,
		"AuditSubTypeBkmExpressTransfer":                 48,
		"AuditSubTypeFastPayTransfer":                    49,
		"AuditSubTypeKakaoPayTransfer":                   50,
		"AuditSubTypePaycoTransfer":                      51,
		"AuditSubTypeSureCashTransfer":                   52,
		"AuditSubTypeCustomerServiceRecharge":            53,
		"AuditSubTypeOnlineRecharge":                     54,
		"AuditSubTypeGotymeBankTransfer":                 55,
		"AuditSubTypeWaveMoneyTransfer":                  56,
		"AuditSubTypeBankRecharge":                       57,
		"AuditSubTypePaymayaTransfer":                    58,
		"AuditSubTypeSamsungPayTransfer":                 59,
		"AuditSubTypeNaverPayTransfer":                   60,
		"AuditSubTypeSmilePayTransfer":                   61,
		"AuditSubTypeDanaTransfer":                       62,
		"AuditSubTypeTodoPagoTransfer":                   63,
		"AuditSubTypeWithdrawalFreeze":                   64,
		"AuditSubTypeWithdrawalRejection":                65,
		"AuditSubTypeWithdrawalUnfreeze":                 66,
		"AuditSubTypeWithdrawalSuccess":                  67,
		"AuditSubTypeTransferToOthers":                   68,
		"AuditSubTypeSilverMerchantAddFunds":             69,
		"AuditSubTypeSilverMerchantRecharge":             70,
		"AuditSubTypeSilverMerchantGiftMembershipAmount": 71,
		"AuditSubTypeSilverMerchantDeduction":            72,
		"AuditSubTypeManualAddFunds":                     73,
		"AuditSubTypeManualOrderCompletion":              74,
		"AuditSubTypeNegativeBalanceCorrection":          75,
		"AuditSubTypeRewardManualAddFunds":               76,
		"AuditSubTypeManualDeduction":                    77,
		"AuditSubTypeDeductionOfAllAssets":               78,
		"AuditSubTypeRecoveryDeduction":                  79,
		"AuditSubTypeManualPullBack":                     80,
		"AuditSubTypeDeductionOfExcessProfit":            81,
		"AuditSubTypeAgentActivity":                      82,
		"AuditSubTypeLuckyBetActivity":                   83,
		"AuditSubTypeInvestmentActivity":                 84,
		"AuditSubTypeNewMemberBonus":                     85,
		"AuditSubTypeRescueFundActivity":                 86,
		"AuditSubTypePromotionActivity":                  87,
		"AuditSubTypeRewardFeedback":                     88,
		"AuditSubTypeRedPacketActivity":                  89,
		"AuditSubTypeInvestmentDeduction":                90,
		"AuditSubTypeSigninActivity":                     91,
		"AuditSubTypeRechargeActivity":                   92,
		"AuditSubTypeCuttingActivity":                    93,
		"AuditSubTypeLotteryAssistanceActivity":          94,
		"AuditSubTypeRankingActivity":                    95,
		"AuditSubTypeCustomActivity":                     96,
		"AuditSubTypeCutOne":                             97,
		"AuditSubTypeLotteryWheelActivity":               98,
		"AuditSubTypeChannelReward":                      99,
		"AuditSubTypeWordCollectionActivity":             100,
		"AuditSubTypeGuessActivity":                      101,
		"AuditSubTypeWaterReturn":                        102,
		"AuditSubTypeCommissionIssuance":                 103,
		"AuditSubTypeCommissionCollection":               104,
		"AuditSubTypeInterestTreasureIncome":             105,
		"AuditSubTypeHallToInterestTreasure":             106,
		"AuditSubTypeManualPullBackInterestTreasure":     107,
		"AuditSubTypeInterestTreasureToHall":             108,
		"AuditSubTypeDailyTask":                          109,
		"AuditSubTypeWeeklyTask":                         110,
		"AuditSubTypeNewbieWelfare":                      111,
		"AuditSubTypeActivityBox":                        112,
		"AuditSubTypeMysteriousTask":                     113,
		"AuditSubTypeVipMonthlyBonus":                    114,
		"AuditSubTypeVipDailyReward":                     115,
		"AuditSubTypeVipWeeklyBonus":                     116,
		"AuditSubTypeVipPromotionBonus":                  117,
		"AuditSubTypeDiscount":                           118,
		"AuditSubTypeManualPullBackClub":                 119,
		"AuditSubTypeHallToClub":                         120,
		"AuditSubTypeClubToHall":                         121,
		"AuditSubTypeClaimFreeze":                        122,
		"AuditSubTypeClaimUnfreeze":                      123,
		"AuditSubTypeClaimFee":                           124,
		"AuditSubTypeClaimAddPoints":                     125,
		"AuditSubTypeClaimSubtractPoints":                126,
		"AuditSubTypeAudit":                              127,
		"AuditSubTypePublicFundCollection":               128,
		"AuditSubTypeBlindBoxLotteryDeduction":           129,
		"AuditSubTypeBlindBoxLotteryReward":              130,
	}
)

func (x AuditSubType) Enum() *AuditSubType {
	p := new(AuditSubType)
	*p = x
	return p
}

func (x AuditSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_finance_v1_finance_proto_enumTypes[3].Descriptor()
}

func (AuditSubType) Type() protoreflect.EnumType {
	return &file_finance_v1_finance_proto_enumTypes[3]
}

func (x AuditSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditSubType.Descriptor instead.
func (AuditSubType) EnumDescriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{3}
}

type AutoReleaseType int32

const (
	AutoReleaseType_AutoReleaseTypeNone AutoReleaseType = 0 // none
	AutoReleaseType_AutoReleaseTypeYes  AutoReleaseType = 1 // 输光自动解除稽核
	AutoReleaseType_AutoReleaseTypeNo   AutoReleaseType = 2 // 输光不自动解除稽核
)

// Enum value maps for AutoReleaseType.
var (
	AutoReleaseType_name = map[int32]string{
		0: "AutoReleaseTypeNone",
		1: "AutoReleaseTypeYes",
		2: "AutoReleaseTypeNo",
	}
	AutoReleaseType_value = map[string]int32{
		"AutoReleaseTypeNone": 0,
		"AutoReleaseTypeYes":  1,
		"AutoReleaseTypeNo":   2,
	}
)

func (x AutoReleaseType) Enum() *AutoReleaseType {
	p := new(AutoReleaseType)
	*p = x
	return p
}

func (x AutoReleaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoReleaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_finance_v1_finance_proto_enumTypes[4].Descriptor()
}

func (AutoReleaseType) Type() protoreflect.EnumType {
	return &file_finance_v1_finance_proto_enumTypes[4]
}

func (x AutoReleaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoReleaseType.Descriptor instead.
func (AutoReleaseType) EnumDescriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{4}
}

type AuditWithdrawType int32

const (
	AuditWithdrawType_AuditWithdrawTypeNone        AuditWithdrawType = 0 // none
	AuditWithdrawType_AuditWithdrawTypeMustAudit   AuditWithdrawType = 1 // 必须稽核
	AuditWithdrawType_AuditWithdrawTypeCanWithdraw AuditWithdrawType = 2 // 可直接提现
	AuditWithdrawType_AuditWithdrawTypeMustBet     AuditWithdrawType = 3 // 必须投注一次
)

// Enum value maps for AuditWithdrawType.
var (
	AuditWithdrawType_name = map[int32]string{
		0: "AuditWithdrawTypeNone",
		1: "AuditWithdrawTypeMustAudit",
		2: "AuditWithdrawTypeCanWithdraw",
		3: "AuditWithdrawTypeMustBet",
	}
	AuditWithdrawType_value = map[string]int32{
		"AuditWithdrawTypeNone":        0,
		"AuditWithdrawTypeMustAudit":   1,
		"AuditWithdrawTypeCanWithdraw": 2,
		"AuditWithdrawTypeMustBet":     3,
	}
)

func (x AuditWithdrawType) Enum() *AuditWithdrawType {
	p := new(AuditWithdrawType)
	*p = x
	return p
}

func (x AuditWithdrawType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditWithdrawType) Descriptor() protoreflect.EnumDescriptor {
	return file_finance_v1_finance_proto_enumTypes[5].Descriptor()
}

func (AuditWithdrawType) Type() protoreflect.EnumType {
	return &file_finance_v1_finance_proto_enumTypes[5]
}

func (x AuditWithdrawType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditWithdrawType.Descriptor instead.
func (AuditWithdrawType) EnumDescriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{5}
}

// 提现限制类型
type WithdrawLimitType int32

const (
	WithdrawLimitType_WithdrawLimitTypeNone     WithdrawLimitType = 0 // none
	WithdrawLimitType_WithdrawLimitTypeActivity WithdrawLimitType = 1 //活动
	WithdrawLimitType_WithdrawLimitTypeTask     WithdrawLimitType = 2 // 任务
)

// Enum value maps for WithdrawLimitType.
var (
	WithdrawLimitType_name = map[int32]string{
		0: "WithdrawLimitTypeNone",
		1: "WithdrawLimitTypeActivity",
		2: "WithdrawLimitTypeTask",
	}
	WithdrawLimitType_value = map[string]int32{
		"WithdrawLimitTypeNone":     0,
		"WithdrawLimitTypeActivity": 1,
		"WithdrawLimitTypeTask":     2,
	}
)

func (x WithdrawLimitType) Enum() *WithdrawLimitType {
	p := new(WithdrawLimitType)
	*p = x
	return p
}

func (x WithdrawLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WithdrawLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_finance_v1_finance_proto_enumTypes[6].Descriptor()
}

func (WithdrawLimitType) Type() protoreflect.EnumType {
	return &file_finance_v1_finance_proto_enumTypes[6]
}

func (x WithdrawLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WithdrawLimitType.Descriptor instead.
func (WithdrawLimitType) EnumDescriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{6}
}

type PayInReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserId             int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // 用户Id
	OrderId            string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                     // 订单Id
	OrderNumber        string                 `protobuf:"bytes,3,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                         // 订单编号
	Amount             int64                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                                     // 金额
	Phone              string                 `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`                                                        // 手机号
	RealName           string                 `protobuf:"bytes,6,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                                  // 姓名
	RechargeCategoryId int64                  `protobuf:"varint,7,opt,name=recharge_category_id,json=rechargeCategoryId,proto3" json:"recharge_category_id,omitempty"` // 充值大类Id
	RechargeMerchantId int64                  `protobuf:"varint,8,opt,name=recharge_merchant_id,json=rechargeMerchantId,proto3" json:"recharge_merchant_id,omitempty"` // 代收商户Id
	CurrencyCode       string                 `protobuf:"bytes,9,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                      // 币种
	RechargeChannelId  int64                  `protobuf:"varint,10,opt,name=recharge_channel_id,json=rechargeChannelId,proto3" json:"recharge_channel_id,omitempty"`   // 充值通道id
	Extra              string                 `protobuf:"bytes,11,opt,name=extra,proto3" json:"extra,omitempty"`                                                       // 扩展字段
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PayInReq) Reset() {
	*x = PayInReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayInReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayInReq) ProtoMessage() {}

func (x *PayInReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayInReq.ProtoReflect.Descriptor instead.
func (*PayInReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{0}
}

func (x *PayInReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PayInReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PayInReq) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *PayInReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PayInReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PayInReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *PayInReq) GetRechargeCategoryId() int64 {
	if x != nil {
		return x.RechargeCategoryId
	}
	return 0
}

func (x *PayInReq) GetRechargeMerchantId() int64 {
	if x != nil {
		return x.RechargeMerchantId
	}
	return 0
}

func (x *PayInReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PayInReq) GetRechargeChannelId() int64 {
	if x != nil {
		return x.RechargeChannelId
	}
	return 0
}

func (x *PayInReq) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type PayInResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           int64                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                              // 状态 1-Success 2-Fail
	Msg              string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                                                     // 消息
	ThirdOrderNumber string                 `protobuf:"bytes,3,opt,name=third_order_number,json=thirdOrderNumber,proto3" json:"third_order_number,omitempty"` // 三方单号
	Amount           int64                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                              // 充值金额
	PayUrl           string                 `protobuf:"bytes,5,opt,name=payUrl,proto3" json:"payUrl,omitempty"`                                               // 支付链接
	Test             bool                   `protobuf:"varint,6,opt,name=test,proto3" json:"test,omitempty"`                                                  // 支付测试
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PayInResp) Reset() {
	*x = PayInResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayInResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayInResp) ProtoMessage() {}

func (x *PayInResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayInResp.ProtoReflect.Descriptor instead.
func (*PayInResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{1}
}

func (x *PayInResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayInResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PayInResp) GetThirdOrderNumber() string {
	if x != nil {
		return x.ThirdOrderNumber
	}
	return ""
}

func (x *PayInResp) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PayInResp) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

func (x *PayInResp) GetTest() bool {
	if x != nil {
		return x.Test
	}
	return false
}

type PayOutReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserId             int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                       // 用户Id
	OrderId            string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                     // 订单Id
	OrderNumber        string                 `protobuf:"bytes,3,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                         // 订单编号
	Amount             int64                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                                     // 金额
	Phone              string                 `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`                                                        // 手机号
	RealName           string                 `protobuf:"bytes,6,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                                  // 姓名
	WithdrawMerchantId int64                  `protobuf:"varint,7,opt,name=withdraw_merchant_id,json=withdrawMerchantId,proto3" json:"withdraw_merchant_id,omitempty"` // 代付商户Id
	BankCode           string                 `protobuf:"bytes,8,opt,name=bank_code,json=bankCode,proto3" json:"bank_code,omitempty"`                                  // 银行编码
	CurrencyCode       string                 `protobuf:"bytes,9,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                      // 币种
	WithdrawTypeId     int64                  `protobuf:"varint,10,opt,name=withdraw_type_id,json=withdrawTypeId,proto3" json:"withdraw_type_id,omitempty"`            // 提现方式
	Account            string                 `protobuf:"bytes,12,opt,name=account,proto3" json:"account,omitempty"`                                                   // 提现账号
	Ifsc               string                 `protobuf:"bytes,13,opt,name=ifsc,proto3" json:"ifsc,omitempty"`                                                         // ifsc
	BankName           string                 `protobuf:"bytes,14,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`                                 // 银行名称
	Extra              string                 `protobuf:"bytes,15,opt,name=extra,proto3" json:"extra,omitempty"`                                                       // 扩展字段
	Identity           string                 `protobuf:"bytes,16,opt,name=identity,proto3" json:"identity,omitempty"`                                                 // 身份证
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PayOutReq) Reset() {
	*x = PayOutReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayOutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOutReq) ProtoMessage() {}

func (x *PayOutReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOutReq.ProtoReflect.Descriptor instead.
func (*PayOutReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{2}
}

func (x *PayOutReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PayOutReq) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PayOutReq) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *PayOutReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PayOutReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PayOutReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *PayOutReq) GetWithdrawMerchantId() int64 {
	if x != nil {
		return x.WithdrawMerchantId
	}
	return 0
}

func (x *PayOutReq) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *PayOutReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PayOutReq) GetWithdrawTypeId() int64 {
	if x != nil {
		return x.WithdrawTypeId
	}
	return 0
}

func (x *PayOutReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PayOutReq) GetIfsc() string {
	if x != nil {
		return x.Ifsc
	}
	return ""
}

func (x *PayOutReq) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *PayOutReq) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *PayOutReq) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type PayOutResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           int64                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                              // 状态 1-Success 2-Fail
	Msg              string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                                                     // 消息
	ThirdOrderNumber string                 `protobuf:"bytes,3,opt,name=third_order_number,json=thirdOrderNumber,proto3" json:"third_order_number,omitempty"` // 三方单号
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PayOutResp) Reset() {
	*x = PayOutResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayOutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOutResp) ProtoMessage() {}

func (x *PayOutResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOutResp.ProtoReflect.Descriptor instead.
func (*PayOutResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{3}
}

func (x *PayOutResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PayOutResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PayOutResp) GetThirdOrderNumber() string {
	if x != nil {
		return x.ThirdOrderNumber
	}
	return ""
}

type PayInStatusReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RechargeMerchantId int64                  `protobuf:"varint,1,opt,name=recharge_merchant_id,json=rechargeMerchantId,proto3" json:"recharge_merchant_id,omitempty"` // 代付商户Id
	OrderNumber        string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                         // 订单Id
	ThirdOrderNumber   string                 `protobuf:"bytes,3,opt,name=third_order_number,json=thirdOrderNumber,proto3" json:"third_order_number,omitempty"`        // 三方订单号
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PayInStatusReq) Reset() {
	*x = PayInStatusReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayInStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayInStatusReq) ProtoMessage() {}

func (x *PayInStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayInStatusReq.ProtoReflect.Descriptor instead.
func (*PayInStatusReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{4}
}

func (x *PayInStatusReq) GetRechargeMerchantId() int64 {
	if x != nil {
		return x.RechargeMerchantId
	}
	return 0
}

func (x *PayInStatusReq) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *PayInStatusReq) GetThirdOrderNumber() string {
	if x != nil {
		return x.ThirdOrderNumber
	}
	return ""
}

type PayInStatusResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           PayInStatus            `protobuf:"varint,1,opt,name=status,proto3,enum=finance.v1.PayInStatus" json:"status,omitempty"`                  // 状态
	OrderNumber      string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                  // 订单Id
	ThirdOrderNumber string                 `protobuf:"bytes,3,opt,name=third_order_number,json=thirdOrderNumber,proto3" json:"third_order_number,omitempty"` // 三方订单号
	Amount           int64                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                              // 订单金额
	Msg              string                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`                                                     // 消息
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PayInStatusResp) Reset() {
	*x = PayInStatusResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayInStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayInStatusResp) ProtoMessage() {}

func (x *PayInStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayInStatusResp.ProtoReflect.Descriptor instead.
func (*PayInStatusResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{5}
}

func (x *PayInStatusResp) GetStatus() PayInStatus {
	if x != nil {
		return x.Status
	}
	return PayInStatus_PAY_IN_NONE
}

func (x *PayInStatusResp) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *PayInStatusResp) GetThirdOrderNumber() string {
	if x != nil {
		return x.ThirdOrderNumber
	}
	return ""
}

func (x *PayInStatusResp) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PayInStatusResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type PayOutStatusReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	WithdrawMerchantId int64                  `protobuf:"varint,1,opt,name=withdraw_merchant_id,json=withdrawMerchantId,proto3" json:"withdraw_merchant_id,omitempty"` // 代付商户Id
	OrderNumber        string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                         // 订单Id
	ThirdOrderNumber   string                 `protobuf:"bytes,3,opt,name=third_order_number,json=thirdOrderNumber,proto3" json:"third_order_number,omitempty"`        // 三方订单号
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PayOutStatusReq) Reset() {
	*x = PayOutStatusReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayOutStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOutStatusReq) ProtoMessage() {}

func (x *PayOutStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOutStatusReq.ProtoReflect.Descriptor instead.
func (*PayOutStatusReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{6}
}

func (x *PayOutStatusReq) GetWithdrawMerchantId() int64 {
	if x != nil {
		return x.WithdrawMerchantId
	}
	return 0
}

func (x *PayOutStatusReq) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *PayOutStatusReq) GetThirdOrderNumber() string {
	if x != nil {
		return x.ThirdOrderNumber
	}
	return ""
}

type PayOutStatusResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           PayOutStatus           `protobuf:"varint,1,opt,name=status,proto3,enum=finance.v1.PayOutStatus" json:"status,omitempty"`                 // 状态
	OrderNumber      string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                  // 订单Id
	ThirdOrderNumber string                 `protobuf:"bytes,3,opt,name=third_order_number,json=thirdOrderNumber,proto3" json:"third_order_number,omitempty"` // 三方订单号
	Amount           int64                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                              // 订单金额
	Msg              string                 `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`                                                     // 消息
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PayOutStatusResp) Reset() {
	*x = PayOutStatusResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayOutStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOutStatusResp) ProtoMessage() {}

func (x *PayOutStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOutStatusResp.ProtoReflect.Descriptor instead.
func (*PayOutStatusResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{7}
}

func (x *PayOutStatusResp) GetStatus() PayOutStatus {
	if x != nil {
		return x.Status
	}
	return PayOutStatus_PAY_OUT_NONE
}

func (x *PayOutStatusResp) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *PayOutStatusResp) GetThirdOrderNumber() string {
	if x != nil {
		return x.ThirdOrderNumber
	}
	return ""
}

func (x *PayOutStatusResp) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PayOutStatusResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BalanceReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	WithdrawMerchantId int64                  `protobuf:"varint,1,opt,name=withdraw_merchant_id,json=withdrawMerchantId,proto3" json:"withdraw_merchant_id,omitempty"` // 代付商户Id
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BalanceReq) Reset() {
	*x = BalanceReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceReq) ProtoMessage() {}

func (x *BalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceReq.ProtoReflect.Descriptor instead.
func (*BalanceReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{8}
}

func (x *BalanceReq) GetWithdrawMerchantId() int64 {
	if x != nil {
		return x.WithdrawMerchantId
	}
	return 0
}

type BalanceResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       int64                  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`                              // 余额
	CurrencyCode  string                 `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种
	Status        int64                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                // 状态 1-Success 2-Fail
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceResp) Reset() {
	*x = BalanceResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResp) ProtoMessage() {}

func (x *BalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResp.ProtoReflect.Descriptor instead.
func (*BalanceResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{9}
}

func (x *BalanceResp) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *BalanceResp) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *BalanceResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CalcRechargeReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OrderType            int64                  `protobuf:"varint,1,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`                                   // 充值订单类型  1-在线充值 2-转账充值 3-客服代充 （必填）
	RechargeChannelId    int64                  `protobuf:"varint,2,opt,name=recharge_channel_id,json=rechargeChannelId,proto3" json:"recharge_channel_id,omitempty"`         // 充值通道Id （必填）
	UserId               int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                            // 用户Id （必填）
	RechargeAmount       int64                  `protobuf:"varint,4,opt,name=recharge_amount,json=rechargeAmount,proto3" json:"recharge_amount,omitempty"`                    // 充值金额 （必填）
	RechargeCurrencyCode string                 `protobuf:"bytes,5,opt,name=recharge_currency_code,json=rechargeCurrencyCode,proto3" json:"recharge_currency_code,omitempty"` // 充值币种 （必填）
	RechargeTarget       int32                  `protobuf:"varint,6,opt,name=recharge_target,json=rechargeTarget,proto3" json:"recharge_target,omitempty"`                    // 充值目标 1 用户钱包 , 2 周卡 , 3 月卡 （默认值1)
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CalcRechargeReq) Reset() {
	*x = CalcRechargeReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalcRechargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcRechargeReq) ProtoMessage() {}

func (x *CalcRechargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcRechargeReq.ProtoReflect.Descriptor instead.
func (*CalcRechargeReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{10}
}

func (x *CalcRechargeReq) GetOrderType() int64 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *CalcRechargeReq) GetRechargeChannelId() int64 {
	if x != nil {
		return x.RechargeChannelId
	}
	return 0
}

func (x *CalcRechargeReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CalcRechargeReq) GetRechargeAmount() int64 {
	if x != nil {
		return x.RechargeAmount
	}
	return 0
}

func (x *CalcRechargeReq) GetRechargeCurrencyCode() string {
	if x != nil {
		return x.RechargeCurrencyCode
	}
	return ""
}

func (x *CalcRechargeReq) GetRechargeTarget() int32 {
	if x != nil {
		return x.RechargeTarget
	}
	return 0
}

type CalcRechargeResp struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Amount                       int64                  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`                                                                                       // 充值金额
	ActualReceivedAmount         int64                  `protobuf:"varint,2,opt,name=actual_received_amount,json=actualReceivedAmount,proto3" json:"actual_received_amount,omitempty"`                             // 实际到账金额
	ChannelBonus                 int64                  `protobuf:"varint,3,opt,name=channel_bonus,json=channelBonus,proto3" json:"channel_bonus,omitempty"`                                                       // 渠道奖励金额
	Fee                          int64                  `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`                                                                                             // 手续费
	FirstDepositReward           int64                  `protobuf:"varint,5,opt,name=first_deposit_reward,json=firstDepositReward,proto3" json:"first_deposit_reward,omitempty"`                                   //首充奖励金额
	FirstDepositRewardAmountFrom int64                  `protobuf:"varint,6,opt,name=first_deposit_reward_amount_from,json=firstDepositRewardAmountFrom,proto3" json:"first_deposit_reward_amount_from,omitempty"` //首充奖励金额起始值(随机奖金方式)
	FirstDepositRewardAmountTo   int64                  `protobuf:"varint,7,opt,name=first_deposit_reward_amount_to,json=firstDepositRewardAmountTo,proto3" json:"first_deposit_reward_amount_to,omitempty"`       //首充奖励金额结束值(随机奖金方式)
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *CalcRechargeResp) Reset() {
	*x = CalcRechargeResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalcRechargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcRechargeResp) ProtoMessage() {}

func (x *CalcRechargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcRechargeResp.ProtoReflect.Descriptor instead.
func (*CalcRechargeResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{11}
}

func (x *CalcRechargeResp) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CalcRechargeResp) GetActualReceivedAmount() int64 {
	if x != nil {
		return x.ActualReceivedAmount
	}
	return 0
}

func (x *CalcRechargeResp) GetChannelBonus() int64 {
	if x != nil {
		return x.ChannelBonus
	}
	return 0
}

func (x *CalcRechargeResp) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *CalcRechargeResp) GetFirstDepositReward() int64 {
	if x != nil {
		return x.FirstDepositReward
	}
	return 0
}

func (x *CalcRechargeResp) GetFirstDepositRewardAmountFrom() int64 {
	if x != nil {
		return x.FirstDepositRewardAmountFrom
	}
	return 0
}

func (x *CalcRechargeResp) GetFirstDepositRewardAmountTo() int64 {
	if x != nil {
		return x.FirstDepositRewardAmountTo
	}
	return 0
}

type RechargeReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OrderType            int64                  `protobuf:"varint,1,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`                                    // 充值订单类型  1-在线充值 2-转账充值 3-客服代充 （必填）
	RechargeCategoryId   int64                  `protobuf:"varint,2,opt,name=recharge_category_id,json=rechargeCategoryId,proto3" json:"recharge_category_id,omitempty"`       // 充值大类Id （必填）
	RechargeMerchantId   int64                  `protobuf:"varint,3,opt,name=recharge_merchant_id,json=rechargeMerchantId,proto3" json:"recharge_merchant_id,omitempty"`       // 充值商户Id （在线充值）
	RechargeChannelId    int64                  `protobuf:"varint,4,opt,name=recharge_channel_id,json=rechargeChannelId,proto3" json:"recharge_channel_id,omitempty"`          // 充值通道Id （必填）
	UserId               int64                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             // 用户Id （必填）
	Username             string                 `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`                                                        // 用户账号 （必填）
	RechargeAmount       int64                  `protobuf:"varint,7,opt,name=recharge_amount,json=rechargeAmount,proto3" json:"recharge_amount,omitempty"`                     // 充值金额 （必填）
	OrderAmount          int64                  `protobuf:"varint,8,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`                              // 订单金额 （必填）
	GiftAmount           int64                  `protobuf:"varint,9,opt,name=gift_amount,json=giftAmount,proto3" json:"gift_amount,omitempty"`                                 // 赠送金额 （必填）
	ExchangeRate         string                 `protobuf:"bytes,10,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`                           // 汇率 （必填）
	RechargeCurrencyCode string                 `protobuf:"bytes,11,opt,name=recharge_currency_code,json=rechargeCurrencyCode,proto3" json:"recharge_currency_code,omitempty"` // 充值币种 （必填）
	UserCurrencyCode     string                 `protobuf:"bytes,12,opt,name=user_currency_code,json=userCurrencyCode,proto3" json:"user_currency_code,omitempty"`             // 用户币种 （必填）
	FeeAmount            int64                  `protobuf:"varint,13,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`                                   // 手续费 （必填）
	AuditMulti           string                 `protobuf:"bytes,14,opt,name=auditMulti,proto3" json:"auditMulti,omitempty"`                                                   // 稽核倍数 （必填）
	ReceiveAccount       string                 `protobuf:"bytes,15,opt,name=receive_account,json=receiveAccount,proto3" json:"receive_account,omitempty"`                     // 收款账户地址 （转账充值）
	ReceiveName          string                 `protobuf:"bytes,16,opt,name=receive_name,json=receiveName,proto3" json:"receive_name,omitempty"`                              // 收款人姓名 （转账充值）
	TransferVoucher      string                 `protobuf:"bytes,17,opt,name=transfer_voucher,json=transferVoucher,proto3" json:"transfer_voucher,omitempty"`                  // 转账凭证 （转账充值）
	RealName             string                 `protobuf:"bytes,18,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                                       // 姓名
	Utr                  string                 `protobuf:"bytes,20,opt,name=utr,proto3" json:"utr,omitempty"`                                                                 //utr  (暂时不适用)
	Phone                string                 `protobuf:"bytes,21,opt,name=phone,proto3" json:"phone,omitempty"`                                                             // 手机号（必填）
	RechargeTarget       int32                  `protobuf:"varint,22,opt,name=recharge_target,json=rechargeTarget,proto3" json:"recharge_target,omitempty"`                    // 充值目标 1 用户钱包 , 2 周卡 , 3 月卡 （默认值1)
	TargetId             int32                  `protobuf:"varint,23,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`                                      // 充值目标ID （默认值0)
	SubTargetId          int32                  `protobuf:"varint,24,opt,name=sub_target_id,json=subTargetId,proto3" json:"sub_target_id,omitempty"`                           // 充值目标子ID （默认值0）
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RechargeReq) Reset() {
	*x = RechargeReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RechargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeReq) ProtoMessage() {}

func (x *RechargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeReq.ProtoReflect.Descriptor instead.
func (*RechargeReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{12}
}

func (x *RechargeReq) GetOrderType() int64 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *RechargeReq) GetRechargeCategoryId() int64 {
	if x != nil {
		return x.RechargeCategoryId
	}
	return 0
}

func (x *RechargeReq) GetRechargeMerchantId() int64 {
	if x != nil {
		return x.RechargeMerchantId
	}
	return 0
}

func (x *RechargeReq) GetRechargeChannelId() int64 {
	if x != nil {
		return x.RechargeChannelId
	}
	return 0
}

func (x *RechargeReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RechargeReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RechargeReq) GetRechargeAmount() int64 {
	if x != nil {
		return x.RechargeAmount
	}
	return 0
}

func (x *RechargeReq) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *RechargeReq) GetGiftAmount() int64 {
	if x != nil {
		return x.GiftAmount
	}
	return 0
}

func (x *RechargeReq) GetExchangeRate() string {
	if x != nil {
		return x.ExchangeRate
	}
	return ""
}

func (x *RechargeReq) GetRechargeCurrencyCode() string {
	if x != nil {
		return x.RechargeCurrencyCode
	}
	return ""
}

func (x *RechargeReq) GetUserCurrencyCode() string {
	if x != nil {
		return x.UserCurrencyCode
	}
	return ""
}

func (x *RechargeReq) GetFeeAmount() int64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

func (x *RechargeReq) GetAuditMulti() string {
	if x != nil {
		return x.AuditMulti
	}
	return ""
}

func (x *RechargeReq) GetReceiveAccount() string {
	if x != nil {
		return x.ReceiveAccount
	}
	return ""
}

func (x *RechargeReq) GetReceiveName() string {
	if x != nil {
		return x.ReceiveName
	}
	return ""
}

func (x *RechargeReq) GetTransferVoucher() string {
	if x != nil {
		return x.TransferVoucher
	}
	return ""
}

func (x *RechargeReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *RechargeReq) GetUtr() string {
	if x != nil {
		return x.Utr
	}
	return ""
}

func (x *RechargeReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RechargeReq) GetRechargeTarget() int32 {
	if x != nil {
		return x.RechargeTarget
	}
	return 0
}

func (x *RechargeReq) GetTargetId() int32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *RechargeReq) GetSubTargetId() int32 {
	if x != nil {
		return x.SubTargetId
	}
	return 0
}

type RechargeResp struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           int64                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                              // 状态 1-Success 2-Fail
	Msg              string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                                                     // 消息
	OrderNumber      string                 `protobuf:"bytes,3,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                  // 订单号
	ThirdOrderNumber string                 `protobuf:"bytes,4,opt,name=third_order_number,json=thirdOrderNumber,proto3" json:"third_order_number,omitempty"` // 三方单号
	Amount           int64                  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                                              // 充值金额
	PayUrl           string                 `protobuf:"bytes,6,opt,name=payUrl,proto3" json:"payUrl,omitempty"`                                               // 支付链接
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RechargeResp) Reset() {
	*x = RechargeResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RechargeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeResp) ProtoMessage() {}

func (x *RechargeResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeResp.ProtoReflect.Descriptor instead.
func (*RechargeResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{13}
}

func (x *RechargeResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RechargeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RechargeResp) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *RechargeResp) GetThirdOrderNumber() string {
	if x != nil {
		return x.ThirdOrderNumber
	}
	return ""
}

func (x *RechargeResp) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RechargeResp) GetPayUrl() string {
	if x != nil {
		return x.PayUrl
	}
	return ""
}

type AutoWithdrawJudgeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       int64                  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`       // 订单ID
	CreatedAt     int64                  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 订单创建时间 优化查询
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoWithdrawJudgeReq) Reset() {
	*x = AutoWithdrawJudgeReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoWithdrawJudgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoWithdrawJudgeReq) ProtoMessage() {}

func (x *AutoWithdrawJudgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoWithdrawJudgeReq.ProtoReflect.Descriptor instead.
func (*AutoWithdrawJudgeReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{14}
}

func (x *AutoWithdrawJudgeReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *AutoWithdrawJudgeReq) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type AutoWithdrawJudgeResp struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	AutoWithdraw            bool                   `protobuf:"varint,1,opt,name=auto_withdraw,json=autoWithdraw,proto3" json:"auto_withdraw,omitempty"`                                      // 自动提现通过
	WithdrawMerchantId      int64                  `protobuf:"varint,2,opt,name=withdraw_merchant_id,json=withdrawMerchantId,proto3" json:"withdraw_merchant_id,omitempty"`                  // 提现商户ID
	AutoWithdrawMerchantAll int64                  `protobuf:"varint,3,opt,name=auto_withdraw_merchant_all,json=autoWithdrawMerchantAll,proto3" json:"auto_withdraw_merchant_all,omitempty"` // 是否所有自动提现商户 1-所有 2-指定
	Msg                     string                 `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`                                                                             // 提示信息
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AutoWithdrawJudgeResp) Reset() {
	*x = AutoWithdrawJudgeResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoWithdrawJudgeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoWithdrawJudgeResp) ProtoMessage() {}

func (x *AutoWithdrawJudgeResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoWithdrawJudgeResp.ProtoReflect.Descriptor instead.
func (*AutoWithdrawJudgeResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{15}
}

func (x *AutoWithdrawJudgeResp) GetAutoWithdraw() bool {
	if x != nil {
		return x.AutoWithdraw
	}
	return false
}

func (x *AutoWithdrawJudgeResp) GetWithdrawMerchantId() int64 {
	if x != nil {
		return x.WithdrawMerchantId
	}
	return 0
}

func (x *AutoWithdrawJudgeResp) GetAutoWithdrawMerchantAll() int64 {
	if x != nil {
		return x.AutoWithdrawMerchantAll
	}
	return 0
}

func (x *AutoWithdrawJudgeResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type AutoWithdrawReq struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	OrderId                 int64                  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	WithdrawMerchantId      int64                  `protobuf:"varint,2,opt,name=withdraw_merchant_id,json=withdrawMerchantId,proto3" json:"withdraw_merchant_id,omitempty"`
	AutoMatch               bool                   `protobuf:"varint,3,opt,name=auto_match,json=autoMatch,proto3" json:"auto_match,omitempty"`                                               // 是否自动匹配 true 是 false 否
	Operator                string                 `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`                                                                   // 操作人
	AutoWithdrawMerchantAll int64                  `protobuf:"varint,5,opt,name=auto_withdraw_merchant_all,json=autoWithdrawMerchantAll,proto3" json:"auto_withdraw_merchant_all,omitempty"` // 是否所有自动提现商户 1-所有 2-指定
	CreatedAt               int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                               // 订单创建时间 优化查询
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AutoWithdrawReq) Reset() {
	*x = AutoWithdrawReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoWithdrawReq) ProtoMessage() {}

func (x *AutoWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoWithdrawReq.ProtoReflect.Descriptor instead.
func (*AutoWithdrawReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{16}
}

func (x *AutoWithdrawReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *AutoWithdrawReq) GetWithdrawMerchantId() int64 {
	if x != nil {
		return x.WithdrawMerchantId
	}
	return 0
}

func (x *AutoWithdrawReq) GetAutoMatch() bool {
	if x != nil {
		return x.AutoMatch
	}
	return false
}

func (x *AutoWithdrawReq) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AutoWithdrawReq) GetAutoWithdrawMerchantAll() int64 {
	if x != nil {
		return x.AutoWithdrawMerchantAll
	}
	return 0
}

func (x *AutoWithdrawReq) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type AutoWithdrawResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int64                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"` // 出款状态 1-success 2-fail
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`        // 错误消息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoWithdrawResp) Reset() {
	*x = AutoWithdrawResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoWithdrawResp) ProtoMessage() {}

func (x *AutoWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoWithdrawResp.ProtoReflect.Descriptor instead.
func (*AutoWithdrawResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{17}
}

func (x *AutoWithdrawResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AutoWithdrawResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CalcWithdrawFeeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                   // 用户Id （必填）
	Amount        int64                  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                                 // 提现金额 （必填）
	WithdrawType  int64                  `protobuf:"varint,3,opt,name=withdraw_type,json=withdrawType,proto3" json:"withdraw_type,omitempty"` // 提现方式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalcWithdrawFeeReq) Reset() {
	*x = CalcWithdrawFeeReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalcWithdrawFeeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcWithdrawFeeReq) ProtoMessage() {}

func (x *CalcWithdrawFeeReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcWithdrawFeeReq.ProtoReflect.Descriptor instead.
func (*CalcWithdrawFeeReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{18}
}

func (x *CalcWithdrawFeeReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CalcWithdrawFeeReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CalcWithdrawFeeReq) GetWithdrawType() int64 {
	if x != nil {
		return x.WithdrawType
	}
	return 0
}

type CalcWithdrawFeeResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FeeAmount      int64                  `protobuf:"varint,1,opt,name=fee_amount,json=feeAmount,proto3" json:"fee_amount,omitempty"`                  // 手续费
	AmountCalcType int64                  `protobuf:"varint,2,opt,name=amount_calc_type,json=amountCalcType,proto3" json:"amount_calc_type,omitempty"` // 计算类型 1:固定金额 2:比例
	Rate           string                 `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`                                              //计算比例
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CalcWithdrawFeeResp) Reset() {
	*x = CalcWithdrawFeeResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalcWithdrawFeeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalcWithdrawFeeResp) ProtoMessage() {}

func (x *CalcWithdrawFeeResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalcWithdrawFeeResp.ProtoReflect.Descriptor instead.
func (*CalcWithdrawFeeResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{19}
}

func (x *CalcWithdrawFeeResp) GetFeeAmount() int64 {
	if x != nil {
		return x.FeeAmount
	}
	return 0
}

func (x *CalcWithdrawFeeResp) GetAmountCalcType() int64 {
	if x != nil {
		return x.AmountCalcType
	}
	return 0
}

func (x *CalcWithdrawFeeResp) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

type AutoWithdrawMatchReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	OrderId              int64                  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                          // 订单ID
	OrderNumber          string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                               // 订单号
	CurrencyCode         string                 `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                            // 币种
	ActualReceivedAmount int64                  `protobuf:"varint,4,opt,name=actual_received_amount,json=actualReceivedAmount,proto3" json:"actual_received_amount,omitempty"` // 实际到账金额
	WithdrawTypeId       int64                  `protobuf:"varint,5,opt,name=withdraw_type_id,json=withdrawTypeId,proto3" json:"withdraw_type_id,omitempty"`                   // 提现方式ID
	LimitMerchantIds     []int64                `protobuf:"varint,6,rep,packed,name=limit_merchant_ids,json=limitMerchantIds,proto3" json:"limit_merchant_ids,omitempty"`      // 三方商户ID
	AutoMatch            bool                   `protobuf:"varint,7,opt,name=auto_match,json=autoMatch,proto3" json:"auto_match,omitempty"`                                    // 自动匹配
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AutoWithdrawMatchReq) Reset() {
	*x = AutoWithdrawMatchReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoWithdrawMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoWithdrawMatchReq) ProtoMessage() {}

func (x *AutoWithdrawMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoWithdrawMatchReq.ProtoReflect.Descriptor instead.
func (*AutoWithdrawMatchReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{20}
}

func (x *AutoWithdrawMatchReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *AutoWithdrawMatchReq) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *AutoWithdrawMatchReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AutoWithdrawMatchReq) GetActualReceivedAmount() int64 {
	if x != nil {
		return x.ActualReceivedAmount
	}
	return 0
}

func (x *AutoWithdrawMatchReq) GetWithdrawTypeId() int64 {
	if x != nil {
		return x.WithdrawTypeId
	}
	return 0
}

func (x *AutoWithdrawMatchReq) GetLimitMerchantIds() []int64 {
	if x != nil {
		return x.LimitMerchantIds
	}
	return nil
}

func (x *AutoWithdrawMatchReq) GetAutoMatch() bool {
	if x != nil {
		return x.AutoMatch
	}
	return false
}

type AutoWithdrawMatchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantId    int64                  `protobuf:"varint,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 三方商户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoWithdrawMatchResp) Reset() {
	*x = AutoWithdrawMatchResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoWithdrawMatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoWithdrawMatchResp) ProtoMessage() {}

func (x *AutoWithdrawMatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoWithdrawMatchResp.ProtoReflect.Descriptor instead.
func (*AutoWithdrawMatchResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{21}
}

func (x *AutoWithdrawMatchResp) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

type ReWithdrawReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       int64                  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`       // 订单ID
	CreatedAt     int64                  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 订单创建时间 优化查询
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReWithdrawReq) Reset() {
	*x = ReWithdrawReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReWithdrawReq) ProtoMessage() {}

func (x *ReWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReWithdrawReq.ProtoReflect.Descriptor instead.
func (*ReWithdrawReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{22}
}

func (x *ReWithdrawReq) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ReWithdrawReq) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ReWithdrawResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReWithdrawResp) Reset() {
	*x = ReWithdrawResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReWithdrawResp) ProtoMessage() {}

func (x *ReWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReWithdrawResp.ProtoReflect.Descriptor instead.
func (*ReWithdrawResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{23}
}

// 添加用户稽核
type AddAuditReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserId            int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                       // 用户Id
	Username          string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                                                                  // 用户名
	CurrencyCode      string                 `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                                                      // 币种
	AutoReleaseType   AutoReleaseType        `protobuf:"varint,4,opt,name=auto_release_type,json=autoReleaseType,proto3,enum=finance.v1.AutoReleaseType" json:"auto_release_type,omitempty"`          // 自动解除稽核类型 1-输光自动解除 2-输光不自动解除
	AuditType         AuditType              `protobuf:"varint,5,opt,name=audit_type,json=auditType,proto3,enum=finance.v1.AuditType" json:"audit_type,omitempty"`                                    // 稽核类型
	AuditSubType      AuditSubType           `protobuf:"varint,6,opt,name=audit_sub_type,json=auditSubType,proto3,enum=finance.v1.AuditSubType" json:"audit_sub_type,omitempty"`                      // 稽核子类型
	TargetName        string                 `protobuf:"bytes,7,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`                                                            // 优惠名称
	Amount            int64                  `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`                                                                                     // 交易金额（单位：元）
	Multiple          string                 `protobuf:"bytes,9,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                                                  // 倍数
	AuditAmount       int64                  `protobuf:"varint,10,opt,name=audit_amount,json=auditAmount,proto3" json:"audit_amount,omitempty"`                                                       // 稽核金额（单位:元）
	AuditWithdrawType AuditWithdrawType      `protobuf:"varint,11,opt,name=audit_withdraw_type,json=auditWithdrawType,proto3,enum=finance.v1.AuditWithdrawType" json:"audit_withdraw_type,omitempty"` // 稽核模式
	GamePlatformIds   []int64                `protobuf:"varint,12,rep,packed,name=game_platform_ids,json=gamePlatformIds,proto3" json:"game_platform_ids,omitempty"`                                  // 游戏平台Id
	OrderNo           string                 `protobuf:"bytes,13,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                                                    // 订单号
	WalletType        int64                  `protobuf:"varint,14,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`                                                          // 钱包类型 1：用户钱包,2：代理钱包,3：奖励钱包,4：余额宝
	GameIds           []int64                `protobuf:"varint,15,rep,packed,name=game_ids,json=gameIds,proto3" json:"game_ids,omitempty"`                                                            // 游戏ID
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddAuditReq) Reset() {
	*x = AddAuditReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAuditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAuditReq) ProtoMessage() {}

func (x *AddAuditReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAuditReq.ProtoReflect.Descriptor instead.
func (*AddAuditReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{24}
}

func (x *AddAuditReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddAuditReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddAuditReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AddAuditReq) GetAutoReleaseType() AutoReleaseType {
	if x != nil {
		return x.AutoReleaseType
	}
	return AutoReleaseType_AutoReleaseTypeNone
}

func (x *AddAuditReq) GetAuditType() AuditType {
	if x != nil {
		return x.AuditType
	}
	return AuditType_AuditTypeNone
}

func (x *AddAuditReq) GetAuditSubType() AuditSubType {
	if x != nil {
		return x.AuditSubType
	}
	return AuditSubType_AuditSubTypeNone
}

func (x *AddAuditReq) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *AddAuditReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AddAuditReq) GetMultiple() string {
	if x != nil {
		return x.Multiple
	}
	return ""
}

func (x *AddAuditReq) GetAuditAmount() int64 {
	if x != nil {
		return x.AuditAmount
	}
	return 0
}

func (x *AddAuditReq) GetAuditWithdrawType() AuditWithdrawType {
	if x != nil {
		return x.AuditWithdrawType
	}
	return AuditWithdrawType_AuditWithdrawTypeNone
}

func (x *AddAuditReq) GetGamePlatformIds() []int64 {
	if x != nil {
		return x.GamePlatformIds
	}
	return nil
}

func (x *AddAuditReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *AddAuditReq) GetWalletType() int64 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *AddAuditReq) GetGameIds() []int64 {
	if x != nil {
		return x.GameIds
	}
	return nil
}

type AddAuditResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AuditId       int64                  `protobuf:"varint,1,opt,name=audit_id,json=auditId,proto3" json:"audit_id,omitempty"` // 稽核Id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAuditResp) Reset() {
	*x = AddAuditResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAuditResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAuditResp) ProtoMessage() {}

func (x *AddAuditResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAuditResp.ProtoReflect.Descriptor instead.
func (*AddAuditResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{25}
}

func (x *AddAuditResp) GetAuditId() int64 {
	if x != nil {
		return x.AuditId
	}
	return 0
}

// 更新稽核金额（打稽核）
type UpdateAuditAmountReq struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	UserId               int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 用户Id
	AuditAmount          int64                  `protobuf:"varint,2,opt,name=audit_amount,json=auditAmount,proto3" json:"audit_amount,omitempty"`                               // 稽核金额(投注金额)（单位:元）
	CurrencyCode         string                 `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                             // 币种
	GamePlatformId       int64                  `protobuf:"varint,4,opt,name=game_platform_id,json=gamePlatformId,proto3" json:"game_platform_id,omitempty"`                    // 游戏平台Id
	TripartitePlatformId int64                  `protobuf:"varint,10,opt,name=tripartite_platform_id,json=tripartitePlatformId,proto3" json:"tripartite_platform_id,omitempty"` // 三方游戏平台ID
	GameId               int64                  `protobuf:"varint,5,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                              // 游戏Id
	TripartiteGameId     int64                  `protobuf:"varint,6,opt,name=tripartite_game_id,json=tripartiteGameId,proto3" json:"tripartite_game_id,omitempty"`              // 三方游戏Id
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateAuditAmountReq) Reset() {
	*x = UpdateAuditAmountReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAuditAmountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuditAmountReq) ProtoMessage() {}

func (x *UpdateAuditAmountReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuditAmountReq.ProtoReflect.Descriptor instead.
func (*UpdateAuditAmountReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateAuditAmountReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateAuditAmountReq) GetAuditAmount() int64 {
	if x != nil {
		return x.AuditAmount
	}
	return 0
}

func (x *UpdateAuditAmountReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *UpdateAuditAmountReq) GetGamePlatformId() int64 {
	if x != nil {
		return x.GamePlatformId
	}
	return 0
}

func (x *UpdateAuditAmountReq) GetTripartitePlatformId() int64 {
	if x != nil {
		return x.TripartitePlatformId
	}
	return 0
}

func (x *UpdateAuditAmountReq) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *UpdateAuditAmountReq) GetTripartiteGameId() int64 {
	if x != nil {
		return x.TripartiteGameId
	}
	return 0
}

type UpdateAuditAmountResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAuditAmountResp) Reset() {
	*x = UpdateAuditAmountResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAuditAmountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuditAmountResp) ProtoMessage() {}

func (x *UpdateAuditAmountResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuditAmountResp.ProtoReflect.Descriptor instead.
func (*UpdateAuditAmountResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{27}
}

type GetAuditInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户Id
	CurrencyCode  string                 `protobuf:"bytes,2,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditInfoReq) Reset() {
	*x = GetAuditInfoReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditInfoReq) ProtoMessage() {}

func (x *GetAuditInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditInfoReq.ProtoReflect.Descriptor instead.
func (*GetAuditInfoReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{28}
}

func (x *GetAuditInfoReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAuditInfoReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type GetAuditInfoResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NeedBetAmount int64                  `protobuf:"varint,1,opt,name=need_bet_amount,json=needBetAmount,proto3" json:"need_bet_amount,omitempty"` // 需要投注金额
	NeedBetCount  int64                  `protobuf:"varint,2,opt,name=need_bet_count,json=needBetCount,proto3" json:"need_bet_count,omitempty"`    // 需要投注次数
	Balance       int64                  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`                                    // 可用餘額
	CurrencyCode  string                 `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`       //货币代码
	Username      string                 `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`                                   // 用户名
	UserId        int64                  `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`                                      // 用户Id
	CanWithdraw   bool                   `protobuf:"varint,7,opt,name=can_withdraw,json=canWithdraw,proto3" json:"can_withdraw,omitempty"`         // 是否可提现 true 可以 false 不可以
	UnFinishNum   int64                  `protobuf:"varint,8,opt,name=un_finish_num,json=unFinishNum,proto3" json:"un_finish_num,omitempty"`       // 未完成稽核任務數量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditInfoResp) Reset() {
	*x = GetAuditInfoResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditInfoResp) ProtoMessage() {}

func (x *GetAuditInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditInfoResp.ProtoReflect.Descriptor instead.
func (*GetAuditInfoResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{29}
}

func (x *GetAuditInfoResp) GetNeedBetAmount() int64 {
	if x != nil {
		return x.NeedBetAmount
	}
	return 0
}

func (x *GetAuditInfoResp) GetNeedBetCount() int64 {
	if x != nil {
		return x.NeedBetCount
	}
	return 0
}

func (x *GetAuditInfoResp) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetAuditInfoResp) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *GetAuditInfoResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetAuditInfoResp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAuditInfoResp) GetCanWithdraw() bool {
	if x != nil {
		return x.CanWithdraw
	}
	return false
}

func (x *GetAuditInfoResp) GetUnFinishNum() int64 {
	if x != nil {
		return x.UnFinishNum
	}
	return 0
}

type GetAuditListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户Id
	Status        []int64                `protobuf:"varint,2,rep,packed,name=status,proto3" json:"status,omitempty"`              // 稽核状态
	Page          int64                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize      int64                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditListReq) Reset() {
	*x = GetAuditListReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditListReq) ProtoMessage() {}

func (x *GetAuditListReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditListReq.ProtoReflect.Descriptor instead.
func (*GetAuditListReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{30}
}

func (x *GetAuditListReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAuditListReq) GetStatus() []int64 {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetAuditListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetAuditListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type AuditInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                // 稽核id
	UserId             int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                          // 用户Id
	AuditManageType    int64                  `protobuf:"varint,3,opt,name=audit_manage_type,json=auditManageType,proto3" json:"audit_manage_type,omitempty"`             // 稽核类型
	Multiple           string                 `protobuf:"bytes,4,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                     // 稽核倍数
	Status             int64                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                                        // 状态
	CreatedAt          int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                 // 创建时间
	NeedAmount         int64                  `protobuf:"varint,7,opt,name=need_amount,json=needAmount,proto3" json:"need_amount,omitempty"`                              // 需要稽核金额
	FinishAmount       int64                  `protobuf:"varint,8,opt,name=finish_amount,json=finishAmount,proto3" json:"finish_amount,omitempty"`                        // 完成稽核金额
	UnFinishAmount     int64                  `protobuf:"varint,9,opt,name=un_finish_amount,json=unFinishAmount,proto3" json:"un_finish_amount,omitempty"`                // 未完成稽核金额
	OrderNo            string                 `protobuf:"bytes,10,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                       // 订单号
	AuditManageSubType int64                  `protobuf:"varint,11,opt,name=audit_manage_sub_type,json=auditManageSubType,proto3" json:"audit_manage_sub_type,omitempty"` // 稽核子类型
	WalletType         int64                  `protobuf:"varint,12,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`                             // 钱包类型
	Amount             int64                  `protobuf:"varint,13,opt,name=amount,proto3" json:"amount,omitempty"`                                                       // 稽核金额
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AuditInfo) Reset() {
	*x = AuditInfo{}
	mi := &file_finance_v1_finance_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditInfo) ProtoMessage() {}

func (x *AuditInfo) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditInfo.ProtoReflect.Descriptor instead.
func (*AuditInfo) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{31}
}

func (x *AuditInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AuditInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuditInfo) GetAuditManageType() int64 {
	if x != nil {
		return x.AuditManageType
	}
	return 0
}

func (x *AuditInfo) GetMultiple() string {
	if x != nil {
		return x.Multiple
	}
	return ""
}

func (x *AuditInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AuditInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AuditInfo) GetNeedAmount() int64 {
	if x != nil {
		return x.NeedAmount
	}
	return 0
}

func (x *AuditInfo) GetFinishAmount() int64 {
	if x != nil {
		return x.FinishAmount
	}
	return 0
}

func (x *AuditInfo) GetUnFinishAmount() int64 {
	if x != nil {
		return x.UnFinishAmount
	}
	return 0
}

func (x *AuditInfo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *AuditInfo) GetAuditManageSubType() int64 {
	if x != nil {
		return x.AuditManageSubType
	}
	return 0
}

func (x *AuditInfo) GetWalletType() int64 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *AuditInfo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type GetAuditListResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`                         // 总数
	AuditList     []*AuditInfo           `protobuf:"bytes,2,rep,name=audit_list,json=auditList,proto3" json:"audit_list,omitempty"` // 稽核列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditListResp) Reset() {
	*x = GetAuditListResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditListResp) ProtoMessage() {}

func (x *GetAuditListResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditListResp.ProtoReflect.Descriptor instead.
func (*GetAuditListResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{32}
}

func (x *GetAuditListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetAuditListResp) GetAuditList() []*AuditInfo {
	if x != nil {
		return x.AuditList
	}
	return nil
}

type AddAudit struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AutoReleaseType   AutoReleaseType        `protobuf:"varint,1,opt,name=auto_release_type,json=autoReleaseType,proto3,enum=finance.v1.AutoReleaseType" json:"auto_release_type,omitempty"`         // 自动解除稽核类型 1-输光自动解除 2-输光不自动解除
	AuditType         AuditType              `protobuf:"varint,2,opt,name=audit_type,json=auditType,proto3,enum=finance.v1.AuditType" json:"audit_type,omitempty"`                                   // 稽核类型
	AuditSubType      AuditSubType           `protobuf:"varint,3,opt,name=audit_sub_type,json=auditSubType,proto3,enum=finance.v1.AuditSubType" json:"audit_sub_type,omitempty"`                     // 稽核子类型
	TargetName        string                 `protobuf:"bytes,4,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`                                                           // 优惠名称
	Amount            int64                  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`                                                                                    // 交易金额（单位：元）
	Multiple          string                 `protobuf:"bytes,6,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                                                 // 倍数
	AuditAmount       int64                  `protobuf:"varint,7,opt,name=audit_amount,json=auditAmount,proto3" json:"audit_amount,omitempty"`                                                       // 稽核金额（单位:元）
	AuditWithdrawType AuditWithdrawType      `protobuf:"varint,8,opt,name=audit_withdraw_type,json=auditWithdrawType,proto3,enum=finance.v1.AuditWithdrawType" json:"audit_withdraw_type,omitempty"` // 稽核模式
	GamePlatformIds   []int64                `protobuf:"varint,9,rep,packed,name=game_platform_ids,json=gamePlatformIds,proto3" json:"game_platform_ids,omitempty"`                                  // 游戏平台Id
	OrderNo           string                 `protobuf:"bytes,10,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`                                                                   // 订单号
	WalletType        int64                  `protobuf:"varint,11,opt,name=wallet_type,json=walletType,proto3" json:"wallet_type,omitempty"`                                                         // 钱包类型 1：用户钱包,2：代理钱包,3：奖励钱包,4：余额宝
	GameIds           []int64                `protobuf:"varint,12,rep,packed,name=game_ids,json=gameIds,proto3" json:"game_ids,omitempty"`                                                           // 游戏ID
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddAudit) Reset() {
	*x = AddAudit{}
	mi := &file_finance_v1_finance_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAudit) ProtoMessage() {}

func (x *AddAudit) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAudit.ProtoReflect.Descriptor instead.
func (*AddAudit) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{33}
}

func (x *AddAudit) GetAutoReleaseType() AutoReleaseType {
	if x != nil {
		return x.AutoReleaseType
	}
	return AutoReleaseType_AutoReleaseTypeNone
}

func (x *AddAudit) GetAuditType() AuditType {
	if x != nil {
		return x.AuditType
	}
	return AuditType_AuditTypeNone
}

func (x *AddAudit) GetAuditSubType() AuditSubType {
	if x != nil {
		return x.AuditSubType
	}
	return AuditSubType_AuditSubTypeNone
}

func (x *AddAudit) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *AddAudit) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AddAudit) GetMultiple() string {
	if x != nil {
		return x.Multiple
	}
	return ""
}

func (x *AddAudit) GetAuditAmount() int64 {
	if x != nil {
		return x.AuditAmount
	}
	return 0
}

func (x *AddAudit) GetAuditWithdrawType() AuditWithdrawType {
	if x != nil {
		return x.AuditWithdrawType
	}
	return AuditWithdrawType_AuditWithdrawTypeNone
}

func (x *AddAudit) GetGamePlatformIds() []int64 {
	if x != nil {
		return x.GamePlatformIds
	}
	return nil
}

func (x *AddAudit) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *AddAudit) GetWalletType() int64 {
	if x != nil {
		return x.WalletType
	}
	return 0
}

func (x *AddAudit) GetGameIds() []int64 {
	if x != nil {
		return x.GameIds
	}
	return nil
}

type BatchAddAuditReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户Id
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                             // 用户名
	CurrencyCode  string                 `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种
	AuditList     []*AddAudit            `protobuf:"bytes,4,rep,name=audit_list,json=auditList,proto3" json:"audit_list,omitempty"`          // 稽核列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAddAuditReq) Reset() {
	*x = BatchAddAuditReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAddAuditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddAuditReq) ProtoMessage() {}

func (x *BatchAddAuditReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddAuditReq.ProtoReflect.Descriptor instead.
func (*BatchAddAuditReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{34}
}

func (x *BatchAddAuditReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BatchAddAuditReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BatchAddAuditReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *BatchAddAuditReq) GetAuditList() []*AddAudit {
	if x != nil {
		return x.AuditList
	}
	return nil
}

type BatchAddAuditResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchAddAuditResp) Reset() {
	*x = BatchAddAuditResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchAddAuditResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAddAuditResp) ProtoMessage() {}

func (x *BatchAddAuditResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAddAuditResp.ProtoReflect.Descriptor instead.
func (*BatchAddAuditResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{35}
}

type AddWithdrawLimitReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UserId            int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                      // 用户Id
	Username          string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                                                                 // 用户账号
	WithdrawLimitType WithdrawLimitType      `protobuf:"varint,3,opt,name=withdraw_limit_type,json=withdrawLimitType,proto3,enum=finance.v1.WithdrawLimitType" json:"withdraw_limit_type,omitempty"` // 提现限制类型
	TargetId          int64                  `protobuf:"varint,4,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`                                                                // 活动/任务Id
	TargetName        string                 `protobuf:"bytes,5,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`                                                           // 活动/任务名称
	CurrencyCode      string                 `protobuf:"bytes,6,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`                                                     // 币种
	Amount            int64                  `protobuf:"varint,7,opt,name=amount,proto3" json:"amount,omitempty"`                                                                                    // 需要充值金额
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddWithdrawLimitReq) Reset() {
	*x = AddWithdrawLimitReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddWithdrawLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWithdrawLimitReq) ProtoMessage() {}

func (x *AddWithdrawLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWithdrawLimitReq.ProtoReflect.Descriptor instead.
func (*AddWithdrawLimitReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{36}
}

func (x *AddWithdrawLimitReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddWithdrawLimitReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddWithdrawLimitReq) GetWithdrawLimitType() WithdrawLimitType {
	if x != nil {
		return x.WithdrawLimitType
	}
	return WithdrawLimitType_WithdrawLimitTypeNone
}

func (x *AddWithdrawLimitReq) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *AddWithdrawLimitReq) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *AddWithdrawLimitReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AddWithdrawLimitReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type AddWithdrawLimitResp struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	WithdrawLimitId int64                  `protobuf:"varint,1,opt,name=withdraw_limit_id,json=withdrawLimitId,proto3" json:"withdraw_limit_id,omitempty"` // 提现限制Id
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddWithdrawLimitResp) Reset() {
	*x = AddWithdrawLimitResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddWithdrawLimitResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWithdrawLimitResp) ProtoMessage() {}

func (x *AddWithdrawLimitResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWithdrawLimitResp.ProtoReflect.Descriptor instead.
func (*AddWithdrawLimitResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{37}
}

func (x *AddWithdrawLimitResp) GetWithdrawLimitId() int64 {
	if x != nil {
		return x.WithdrawLimitId
	}
	return 0
}

type UpdateWithdrawLimitAmountReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户Id
	Amount        int64                  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                                // 金额
	CurrencyCode  string                 `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"` // 币种
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWithdrawLimitAmountReq) Reset() {
	*x = UpdateWithdrawLimitAmountReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWithdrawLimitAmountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWithdrawLimitAmountReq) ProtoMessage() {}

func (x *UpdateWithdrawLimitAmountReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWithdrawLimitAmountReq.ProtoReflect.Descriptor instead.
func (*UpdateWithdrawLimitAmountReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateWithdrawLimitAmountReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateWithdrawLimitAmountReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UpdateWithdrawLimitAmountReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type UpdateWithdrawLimitAmountResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWithdrawLimitAmountResp) Reset() {
	*x = UpdateWithdrawLimitAmountResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWithdrawLimitAmountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWithdrawLimitAmountResp) ProtoMessage() {}

func (x *UpdateWithdrawLimitAmountResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWithdrawLimitAmountResp.ProtoReflect.Descriptor instead.
func (*UpdateWithdrawLimitAmountResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{39}
}

type WithdrawReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                // 用户ID
	Username         string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                                           // 用户名
	WithdrawType     int64                  `protobuf:"varint,3,opt,name=withdraw_type,json=withdrawType,proto3" json:"withdraw_type,omitempty"`              // 提现方式
	Amount           int64                  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`                                              // 提现金额
	RealName         string                 `protobuf:"bytes,5,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`                           // 真实姓名
	Account          string                 `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`                                             // 收款账号
	BankId           int64                  `protobuf:"varint,7,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`                                // 银行Id
	Ifsc             string                 `protobuf:"bytes,8,opt,name=ifsc,proto3" json:"ifsc,omitempty"`                                                   // IFSC
	Ip               string                 `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`                                                       // IP
	CurrencyCode     string                 `protobuf:"bytes,10,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`              // 币种
	WithdrawCategory int64                  `protobuf:"varint,11,opt,name=withdraw_category,json=withdrawCategory,proto3" json:"withdraw_category,omitempty"` // 提现大类
	Phone            string                 `protobuf:"bytes,12,opt,name=phone,proto3" json:"phone,omitempty"`                                                // 手机号
	Identity         string                 `protobuf:"bytes,13,opt,name=Identity,proto3" json:"Identity,omitempty"`                                          // 身份证号
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WithdrawReq) Reset() {
	*x = WithdrawReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawReq) ProtoMessage() {}

func (x *WithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawReq.ProtoReflect.Descriptor instead.
func (*WithdrawReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{40}
}

func (x *WithdrawReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *WithdrawReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WithdrawReq) GetWithdrawType() int64 {
	if x != nil {
		return x.WithdrawType
	}
	return 0
}

func (x *WithdrawReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WithdrawReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *WithdrawReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *WithdrawReq) GetBankId() int64 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *WithdrawReq) GetIfsc() string {
	if x != nil {
		return x.Ifsc
	}
	return ""
}

func (x *WithdrawReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *WithdrawReq) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *WithdrawReq) GetWithdrawCategory() int64 {
	if x != nil {
		return x.WithdrawCategory
	}
	return 0
}

func (x *WithdrawReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *WithdrawReq) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type WithdrawResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WithdrawResp) Reset() {
	*x = WithdrawResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawResp) ProtoMessage() {}

func (x *WithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawResp.ProtoReflect.Descriptor instead.
func (*WithdrawResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{41}
}

type ExchangeRateReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceCurrencyCode string                 `protobuf:"bytes,1,opt,name=source_currency_code,json=sourceCurrencyCode,proto3" json:"source_currency_code,omitempty"` // 当前币种
	TargetCurrencyCode string                 `protobuf:"bytes,2,opt,name=target_currency_code,json=targetCurrencyCode,proto3" json:"target_currency_code,omitempty"` // 目标币种
	Amount             int64                  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`                                                    // 金额
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExchangeRateReq) Reset() {
	*x = ExchangeRateReq{}
	mi := &file_finance_v1_finance_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeRateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateReq) ProtoMessage() {}

func (x *ExchangeRateReq) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateReq.ProtoReflect.Descriptor instead.
func (*ExchangeRateReq) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{42}
}

func (x *ExchangeRateReq) GetSourceCurrencyCode() string {
	if x != nil {
		return x.SourceCurrencyCode
	}
	return ""
}

func (x *ExchangeRateReq) GetTargetCurrencyCode() string {
	if x != nil {
		return x.TargetCurrencyCode
	}
	return ""
}

func (x *ExchangeRateReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ExchangeRateResp struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SourceCurrencyCode string                 `protobuf:"bytes,1,opt,name=source_currency_code,json=sourceCurrencyCode,proto3" json:"source_currency_code,omitempty"` // 当前币种
	TargetCurrencyCode string                 `protobuf:"bytes,2,opt,name=target_currency_code,json=targetCurrencyCode,proto3" json:"target_currency_code,omitempty"` // 目标币种
	SourceAmount       int64                  `protobuf:"varint,3,opt,name=source_amount,json=sourceAmount,proto3" json:"source_amount,omitempty"`                    // 源币种金额
	TargetAmount       int64                  `protobuf:"varint,4,opt,name=target_amount,json=targetAmount,proto3" json:"target_amount,omitempty"`                    // 目标币种金额
	Rate               string                 `protobuf:"bytes,5,opt,name=rate,proto3" json:"rate,omitempty"`                                                         // 汇率
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExchangeRateResp) Reset() {
	*x = ExchangeRateResp{}
	mi := &file_finance_v1_finance_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeRateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateResp) ProtoMessage() {}

func (x *ExchangeRateResp) ProtoReflect() protoreflect.Message {
	mi := &file_finance_v1_finance_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateResp.ProtoReflect.Descriptor instead.
func (*ExchangeRateResp) Descriptor() ([]byte, []int) {
	return file_finance_v1_finance_proto_rawDescGZIP(), []int{43}
}

func (x *ExchangeRateResp) GetSourceCurrencyCode() string {
	if x != nil {
		return x.SourceCurrencyCode
	}
	return ""
}

func (x *ExchangeRateResp) GetTargetCurrencyCode() string {
	if x != nil {
		return x.TargetCurrencyCode
	}
	return ""
}

func (x *ExchangeRateResp) GetSourceAmount() int64 {
	if x != nil {
		return x.SourceAmount
	}
	return 0
}

func (x *ExchangeRateResp) GetTargetAmount() int64 {
	if x != nil {
		return x.TargetAmount
	}
	return 0
}

func (x *ExchangeRateResp) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

var File_finance_v1_finance_proto protoreflect.FileDescriptor

const file_finance_v1_finance_proto_rawDesc = "" +
	"\n" +
	"\x18finance/v1/finance.proto\x12\n" +
	"finance.v1\"\xfb\x02\n" +
	"\bPayInReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x19\n" +
	"\border_id\x18\x02 \x01(\tR\aorderId\x12!\n" +
	"\forder_number\x18\x03 \x01(\tR\vorderNumber\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x03R\x06amount\x12\x14\n" +
	"\x05phone\x18\x05 \x01(\tR\x05phone\x12\x1b\n" +
	"\treal_name\x18\x06 \x01(\tR\brealName\x120\n" +
	"\x14recharge_category_id\x18\a \x01(\x03R\x12rechargeCategoryId\x120\n" +
	"\x14recharge_merchant_id\x18\b \x01(\x03R\x12rechargeMerchantId\x12#\n" +
	"\rcurrency_code\x18\t \x01(\tR\fcurrencyCode\x12.\n" +
	"\x13recharge_channel_id\x18\n" +
	" \x01(\x03R\x11rechargeChannelId\x12\x14\n" +
	"\x05extra\x18\v \x01(\tR\x05extra\"\xa7\x01\n" +
	"\tPayInResp\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x03R\x06status\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12,\n" +
	"\x12third_order_number\x18\x03 \x01(\tR\x10thirdOrderNumber\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x03R\x06amount\x12\x16\n" +
	"\x06payUrl\x18\x05 \x01(\tR\x06payUrl\x12\x12\n" +
	"\x04test\x18\x06 \x01(\bR\x04test\"\xc8\x03\n" +
	"\tPayOutReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x19\n" +
	"\border_id\x18\x02 \x01(\tR\aorderId\x12!\n" +
	"\forder_number\x18\x03 \x01(\tR\vorderNumber\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x03R\x06amount\x12\x14\n" +
	"\x05phone\x18\x05 \x01(\tR\x05phone\x12\x1b\n" +
	"\treal_name\x18\x06 \x01(\tR\brealName\x120\n" +
	"\x14withdraw_merchant_id\x18\a \x01(\x03R\x12withdrawMerchantId\x12\x1b\n" +
	"\tbank_code\x18\b \x01(\tR\bbankCode\x12#\n" +
	"\rcurrency_code\x18\t \x01(\tR\fcurrencyCode\x12(\n" +
	"\x10withdraw_type_id\x18\n" +
	" \x01(\x03R\x0ewithdrawTypeId\x12\x18\n" +
	"\aaccount\x18\f \x01(\tR\aaccount\x12\x12\n" +
	"\x04ifsc\x18\r \x01(\tR\x04ifsc\x12\x1b\n" +
	"\tbank_name\x18\x0e \x01(\tR\bbankName\x12\x14\n" +
	"\x05extra\x18\x0f \x01(\tR\x05extra\x12\x1a\n" +
	"\bidentity\x18\x10 \x01(\tR\bidentity\"d\n" +
	"\n" +
	"PayOutResp\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x03R\x06status\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12,\n" +
	"\x12third_order_number\x18\x03 \x01(\tR\x10thirdOrderNumber\"\x93\x01\n" +
	"\x0ePayInStatusReq\x120\n" +
	"\x14recharge_merchant_id\x18\x01 \x01(\x03R\x12rechargeMerchantId\x12!\n" +
	"\forder_number\x18\x02 \x01(\tR\vorderNumber\x12,\n" +
	"\x12third_order_number\x18\x03 \x01(\tR\x10thirdOrderNumber\"\xbd\x01\n" +
	"\x0fPayInStatusResp\x12/\n" +
	"\x06status\x18\x01 \x01(\x0e2\x17.finance.v1.PayInStatusR\x06status\x12!\n" +
	"\forder_number\x18\x02 \x01(\tR\vorderNumber\x12,\n" +
	"\x12third_order_number\x18\x03 \x01(\tR\x10thirdOrderNumber\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x03R\x06amount\x12\x10\n" +
	"\x03msg\x18\x05 \x01(\tR\x03msg\"\x94\x01\n" +
	"\x0fPayOutStatusReq\x120\n" +
	"\x14withdraw_merchant_id\x18\x01 \x01(\x03R\x12withdrawMerchantId\x12!\n" +
	"\forder_number\x18\x02 \x01(\tR\vorderNumber\x12,\n" +
	"\x12third_order_number\x18\x03 \x01(\tR\x10thirdOrderNumber\"\xbf\x01\n" +
	"\x10PayOutStatusResp\x120\n" +
	"\x06status\x18\x01 \x01(\x0e2\x18.finance.v1.PayOutStatusR\x06status\x12!\n" +
	"\forder_number\x18\x02 \x01(\tR\vorderNumber\x12,\n" +
	"\x12third_order_number\x18\x03 \x01(\tR\x10thirdOrderNumber\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x03R\x06amount\x12\x10\n" +
	"\x03msg\x18\x05 \x01(\tR\x03msg\">\n" +
	"\n" +
	"BalanceReq\x120\n" +
	"\x14withdraw_merchant_id\x18\x01 \x01(\x03R\x12withdrawMerchantId\"d\n" +
	"\vBalanceResp\x12\x18\n" +
	"\abalance\x18\x01 \x01(\x03R\abalance\x12#\n" +
	"\rcurrency_code\x18\x02 \x01(\tR\fcurrencyCode\x12\x16\n" +
	"\x06status\x18\x03 \x01(\x03R\x06status\"\x81\x02\n" +
	"\x0fCalcRechargeReq\x12\x1d\n" +
	"\n" +
	"order_type\x18\x01 \x01(\x03R\torderType\x12.\n" +
	"\x13recharge_channel_id\x18\x02 \x01(\x03R\x11rechargeChannelId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\x03R\x06userId\x12'\n" +
	"\x0frecharge_amount\x18\x04 \x01(\x03R\x0erechargeAmount\x124\n" +
	"\x16recharge_currency_code\x18\x05 \x01(\tR\x14rechargeCurrencyCode\x12'\n" +
	"\x0frecharge_target\x18\x06 \x01(\x05R\x0erechargeTarget\"\xd5\x02\n" +
	"\x10CalcRechargeResp\x12\x16\n" +
	"\x06amount\x18\x01 \x01(\x03R\x06amount\x124\n" +
	"\x16actual_received_amount\x18\x02 \x01(\x03R\x14actualReceivedAmount\x12#\n" +
	"\rchannel_bonus\x18\x03 \x01(\x03R\fchannelBonus\x12\x10\n" +
	"\x03fee\x18\x04 \x01(\x03R\x03fee\x120\n" +
	"\x14first_deposit_reward\x18\x05 \x01(\x03R\x12firstDepositReward\x12F\n" +
	" first_deposit_reward_amount_from\x18\x06 \x01(\x03R\x1cfirstDepositRewardAmountFrom\x12B\n" +
	"\x1efirst_deposit_reward_amount_to\x18\a \x01(\x03R\x1afirstDepositRewardAmountTo\"\xd0\x06\n" +
	"\vRechargeReq\x12\x1d\n" +
	"\n" +
	"order_type\x18\x01 \x01(\x03R\torderType\x120\n" +
	"\x14recharge_category_id\x18\x02 \x01(\x03R\x12rechargeCategoryId\x120\n" +
	"\x14recharge_merchant_id\x18\x03 \x01(\x03R\x12rechargeMerchantId\x12.\n" +
	"\x13recharge_channel_id\x18\x04 \x01(\x03R\x11rechargeChannelId\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\x03R\x06userId\x12\x1a\n" +
	"\busername\x18\x06 \x01(\tR\busername\x12'\n" +
	"\x0frecharge_amount\x18\a \x01(\x03R\x0erechargeAmount\x12!\n" +
	"\forder_amount\x18\b \x01(\x03R\vorderAmount\x12\x1f\n" +
	"\vgift_amount\x18\t \x01(\x03R\n" +
	"giftAmount\x12#\n" +
	"\rexchange_rate\x18\n" +
	" \x01(\tR\fexchangeRate\x124\n" +
	"\x16recharge_currency_code\x18\v \x01(\tR\x14rechargeCurrencyCode\x12,\n" +
	"\x12user_currency_code\x18\f \x01(\tR\x10userCurrencyCode\x12\x1d\n" +
	"\n" +
	"fee_amount\x18\r \x01(\x03R\tfeeAmount\x12\x1e\n" +
	"\n" +
	"auditMulti\x18\x0e \x01(\tR\n" +
	"auditMulti\x12'\n" +
	"\x0freceive_account\x18\x0f \x01(\tR\x0ereceiveAccount\x12!\n" +
	"\freceive_name\x18\x10 \x01(\tR\vreceiveName\x12)\n" +
	"\x10transfer_voucher\x18\x11 \x01(\tR\x0ftransferVoucher\x12\x1b\n" +
	"\treal_name\x18\x12 \x01(\tR\brealName\x12\x10\n" +
	"\x03utr\x18\x14 \x01(\tR\x03utr\x12\x14\n" +
	"\x05phone\x18\x15 \x01(\tR\x05phone\x12'\n" +
	"\x0frecharge_target\x18\x16 \x01(\x05R\x0erechargeTarget\x12\x1b\n" +
	"\ttarget_id\x18\x17 \x01(\x05R\btargetId\x12\"\n" +
	"\rsub_target_id\x18\x18 \x01(\x05R\vsubTargetId\"\xb9\x01\n" +
	"\fRechargeResp\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x03R\x06status\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12!\n" +
	"\forder_number\x18\x03 \x01(\tR\vorderNumber\x12,\n" +
	"\x12third_order_number\x18\x04 \x01(\tR\x10thirdOrderNumber\x12\x16\n" +
	"\x06amount\x18\x05 \x01(\x03R\x06amount\x12\x16\n" +
	"\x06payUrl\x18\x06 \x01(\tR\x06payUrl\"P\n" +
	"\x14AutoWithdrawJudgeReq\x12\x19\n" +
	"\border_id\x18\x01 \x01(\x03R\aorderId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x02 \x01(\x03R\tcreatedAt\"\xbd\x01\n" +
	"\x15AutoWithdrawJudgeResp\x12#\n" +
	"\rauto_withdraw\x18\x01 \x01(\bR\fautoWithdraw\x120\n" +
	"\x14withdraw_merchant_id\x18\x02 \x01(\x03R\x12withdrawMerchantId\x12;\n" +
	"\x1aauto_withdraw_merchant_all\x18\x03 \x01(\x03R\x17autoWithdrawMerchantAll\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\"\xf5\x01\n" +
	"\x0fAutoWithdrawReq\x12\x19\n" +
	"\border_id\x18\x01 \x01(\x03R\aorderId\x120\n" +
	"\x14withdraw_merchant_id\x18\x02 \x01(\x03R\x12withdrawMerchantId\x12\x1d\n" +
	"\n" +
	"auto_match\x18\x03 \x01(\bR\tautoMatch\x12\x1a\n" +
	"\boperator\x18\x04 \x01(\tR\boperator\x12;\n" +
	"\x1aauto_withdraw_merchant_all\x18\x05 \x01(\x03R\x17autoWithdrawMerchantAll\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\"<\n" +
	"\x10AutoWithdrawResp\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x03R\x06status\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"j\n" +
	"\x12CalcWithdrawFeeReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x03R\x06amount\x12#\n" +
	"\rwithdraw_type\x18\x03 \x01(\x03R\fwithdrawType\"r\n" +
	"\x13CalcWithdrawFeeResp\x12\x1d\n" +
	"\n" +
	"fee_amount\x18\x01 \x01(\x03R\tfeeAmount\x12(\n" +
	"\x10amount_calc_type\x18\x02 \x01(\x03R\x0eamountCalcType\x12\x12\n" +
	"\x04rate\x18\x03 \x01(\tR\x04rate\"\xa6\x02\n" +
	"\x14AutoWithdrawMatchReq\x12\x19\n" +
	"\border_id\x18\x01 \x01(\x03R\aorderId\x12!\n" +
	"\forder_number\x18\x02 \x01(\tR\vorderNumber\x12#\n" +
	"\rcurrency_code\x18\x03 \x01(\tR\fcurrencyCode\x124\n" +
	"\x16actual_received_amount\x18\x04 \x01(\x03R\x14actualReceivedAmount\x12(\n" +
	"\x10withdraw_type_id\x18\x05 \x01(\x03R\x0ewithdrawTypeId\x12,\n" +
	"\x12limit_merchant_ids\x18\x06 \x03(\x03R\x10limitMerchantIds\x12\x1d\n" +
	"\n" +
	"auto_match\x18\a \x01(\bR\tautoMatch\"8\n" +
	"\x15AutoWithdrawMatchResp\x12\x1f\n" +
	"\vmerchant_id\x18\x01 \x01(\x03R\n" +
	"merchantId\"I\n" +
	"\rReWithdrawReq\x12\x19\n" +
	"\border_id\x18\x01 \x01(\x03R\aorderId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x02 \x01(\x03R\tcreatedAt\"\x10\n" +
	"\x0eReWithdrawResp\"\xf0\x04\n" +
	"\vAddAuditReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12#\n" +
	"\rcurrency_code\x18\x03 \x01(\tR\fcurrencyCode\x12G\n" +
	"\x11auto_release_type\x18\x04 \x01(\x0e2\x1b.finance.v1.AutoReleaseTypeR\x0fautoReleaseType\x124\n" +
	"\n" +
	"audit_type\x18\x05 \x01(\x0e2\x15.finance.v1.AuditTypeR\tauditType\x12>\n" +
	"\x0eaudit_sub_type\x18\x06 \x01(\x0e2\x18.finance.v1.AuditSubTypeR\fauditSubType\x12\x1f\n" +
	"\vtarget_name\x18\a \x01(\tR\n" +
	"targetName\x12\x16\n" +
	"\x06amount\x18\b \x01(\x03R\x06amount\x12\x1a\n" +
	"\bmultiple\x18\t \x01(\tR\bmultiple\x12!\n" +
	"\faudit_amount\x18\n" +
	" \x01(\x03R\vauditAmount\x12M\n" +
	"\x13audit_withdraw_type\x18\v \x01(\x0e2\x1d.finance.v1.AuditWithdrawTypeR\x11auditWithdrawType\x12*\n" +
	"\x11game_platform_ids\x18\f \x03(\x03R\x0fgamePlatformIds\x12\x19\n" +
	"\border_no\x18\r \x01(\tR\aorderNo\x12\x1f\n" +
	"\vwallet_type\x18\x0e \x01(\x03R\n" +
	"walletType\x12\x19\n" +
	"\bgame_ids\x18\x0f \x03(\x03R\agameIds\")\n" +
	"\fAddAuditResp\x12\x19\n" +
	"\baudit_id\x18\x01 \x01(\x03R\aauditId\"\x9e\x02\n" +
	"\x14UpdateAuditAmountReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12!\n" +
	"\faudit_amount\x18\x02 \x01(\x03R\vauditAmount\x12#\n" +
	"\rcurrency_code\x18\x03 \x01(\tR\fcurrencyCode\x12(\n" +
	"\x10game_platform_id\x18\x04 \x01(\x03R\x0egamePlatformId\x124\n" +
	"\x16tripartite_platform_id\x18\n" +
	" \x01(\x03R\x14tripartitePlatformId\x12\x17\n" +
	"\agame_id\x18\x05 \x01(\x03R\x06gameId\x12,\n" +
	"\x12tripartite_game_id\x18\x06 \x01(\x03R\x10tripartiteGameId\"\x17\n" +
	"\x15UpdateAuditAmountResp\"O\n" +
	"\x0fGetAuditInfoReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12#\n" +
	"\rcurrency_code\x18\x02 \x01(\tR\fcurrencyCode\"\x9a\x02\n" +
	"\x10GetAuditInfoResp\x12&\n" +
	"\x0fneed_bet_amount\x18\x01 \x01(\x03R\rneedBetAmount\x12$\n" +
	"\x0eneed_bet_count\x18\x02 \x01(\x03R\fneedBetCount\x12\x18\n" +
	"\abalance\x18\x03 \x01(\x03R\abalance\x12#\n" +
	"\rcurrency_code\x18\x04 \x01(\tR\fcurrencyCode\x12\x1a\n" +
	"\busername\x18\x05 \x01(\tR\busername\x12\x16\n" +
	"\x06userId\x18\x06 \x01(\x03R\x06userId\x12!\n" +
	"\fcan_withdraw\x18\a \x01(\bR\vcanWithdraw\x12\"\n" +
	"\run_finish_num\x18\b \x01(\x03R\vunFinishNum\"s\n" +
	"\x0fGetAuditListReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x16\n" +
	"\x06status\x18\x02 \x03(\x03R\x06status\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x03R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x03R\bpageSize\"\xaa\x03\n" +
	"\tAuditInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\x12*\n" +
	"\x11audit_manage_type\x18\x03 \x01(\x03R\x0fauditManageType\x12\x1a\n" +
	"\bmultiple\x18\x04 \x01(\tR\bmultiple\x12\x16\n" +
	"\x06status\x18\x05 \x01(\x03R\x06status\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\x12\x1f\n" +
	"\vneed_amount\x18\a \x01(\x03R\n" +
	"needAmount\x12#\n" +
	"\rfinish_amount\x18\b \x01(\x03R\ffinishAmount\x12(\n" +
	"\x10un_finish_amount\x18\t \x01(\x03R\x0eunFinishAmount\x12\x19\n" +
	"\border_no\x18\n" +
	" \x01(\tR\aorderNo\x121\n" +
	"\x15audit_manage_sub_type\x18\v \x01(\x03R\x12auditManageSubType\x12\x1f\n" +
	"\vwallet_type\x18\f \x01(\x03R\n" +
	"walletType\x12\x16\n" +
	"\x06amount\x18\r \x01(\x03R\x06amount\"^\n" +
	"\x10GetAuditListResp\x12\x14\n" +
	"\x05total\x18\x01 \x01(\x03R\x05total\x124\n" +
	"\n" +
	"audit_list\x18\x02 \x03(\v2\x15.finance.v1.AuditInfoR\tauditList\"\x93\x04\n" +
	"\bAddAudit\x12G\n" +
	"\x11auto_release_type\x18\x01 \x01(\x0e2\x1b.finance.v1.AutoReleaseTypeR\x0fautoReleaseType\x124\n" +
	"\n" +
	"audit_type\x18\x02 \x01(\x0e2\x15.finance.v1.AuditTypeR\tauditType\x12>\n" +
	"\x0eaudit_sub_type\x18\x03 \x01(\x0e2\x18.finance.v1.AuditSubTypeR\fauditSubType\x12\x1f\n" +
	"\vtarget_name\x18\x04 \x01(\tR\n" +
	"targetName\x12\x16\n" +
	"\x06amount\x18\x05 \x01(\x03R\x06amount\x12\x1a\n" +
	"\bmultiple\x18\x06 \x01(\tR\bmultiple\x12!\n" +
	"\faudit_amount\x18\a \x01(\x03R\vauditAmount\x12M\n" +
	"\x13audit_withdraw_type\x18\b \x01(\x0e2\x1d.finance.v1.AuditWithdrawTypeR\x11auditWithdrawType\x12*\n" +
	"\x11game_platform_ids\x18\t \x03(\x03R\x0fgamePlatformIds\x12\x19\n" +
	"\border_no\x18\n" +
	" \x01(\tR\aorderNo\x12\x1f\n" +
	"\vwallet_type\x18\v \x01(\x03R\n" +
	"walletType\x12\x19\n" +
	"\bgame_ids\x18\f \x03(\x03R\agameIds\"\xa1\x01\n" +
	"\x10BatchAddAuditReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12#\n" +
	"\rcurrency_code\x18\x03 \x01(\tR\fcurrencyCode\x123\n" +
	"\n" +
	"audit_list\x18\x04 \x03(\v2\x14.finance.v1.AddAuditR\tauditList\"\x13\n" +
	"\x11BatchAddAuditResp\"\x94\x02\n" +
	"\x13AddWithdrawLimitReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12M\n" +
	"\x13withdraw_limit_type\x18\x03 \x01(\x0e2\x1d.finance.v1.WithdrawLimitTypeR\x11withdrawLimitType\x12\x1b\n" +
	"\ttarget_id\x18\x04 \x01(\x03R\btargetId\x12\x1f\n" +
	"\vtarget_name\x18\x05 \x01(\tR\n" +
	"targetName\x12#\n" +
	"\rcurrency_code\x18\x06 \x01(\tR\fcurrencyCode\x12\x16\n" +
	"\x06amount\x18\a \x01(\x03R\x06amount\"B\n" +
	"\x14AddWithdrawLimitResp\x12*\n" +
	"\x11withdraw_limit_id\x18\x01 \x01(\x03R\x0fwithdrawLimitId\"t\n" +
	"\x1cUpdateWithdrawLimitAmountReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x03R\x06amount\x12#\n" +
	"\rcurrency_code\x18\x03 \x01(\tR\fcurrencyCode\"\x1f\n" +
	"\x1dUpdateWithdrawLimitAmountResp\"\xf7\x02\n" +
	"\vWithdrawReq\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12#\n" +
	"\rwithdraw_type\x18\x03 \x01(\x03R\fwithdrawType\x12\x16\n" +
	"\x06amount\x18\x04 \x01(\x03R\x06amount\x12\x1b\n" +
	"\treal_name\x18\x05 \x01(\tR\brealName\x12\x18\n" +
	"\aaccount\x18\x06 \x01(\tR\aaccount\x12\x17\n" +
	"\abank_id\x18\a \x01(\x03R\x06bankId\x12\x12\n" +
	"\x04ifsc\x18\b \x01(\tR\x04ifsc\x12\x0e\n" +
	"\x02ip\x18\t \x01(\tR\x02ip\x12#\n" +
	"\rcurrency_code\x18\n" +
	" \x01(\tR\fcurrencyCode\x12+\n" +
	"\x11withdraw_category\x18\v \x01(\x03R\x10withdrawCategory\x12\x14\n" +
	"\x05phone\x18\f \x01(\tR\x05phone\x12\x1a\n" +
	"\bIdentity\x18\r \x01(\tR\bIdentity\"\x0e\n" +
	"\fWithdrawResp\"\x8d\x01\n" +
	"\x0fExchangeRateReq\x120\n" +
	"\x14source_currency_code\x18\x01 \x01(\tR\x12sourceCurrencyCode\x120\n" +
	"\x14target_currency_code\x18\x02 \x01(\tR\x12targetCurrencyCode\x12\x16\n" +
	"\x06amount\x18\x03 \x01(\x03R\x06amount\"\xd4\x01\n" +
	"\x10ExchangeRateResp\x120\n" +
	"\x14source_currency_code\x18\x01 \x01(\tR\x12sourceCurrencyCode\x120\n" +
	"\x14target_currency_code\x18\x02 \x01(\tR\x12targetCurrencyCode\x12#\n" +
	"\rsource_amount\x18\x03 \x01(\x03R\fsourceAmount\x12#\n" +
	"\rtarget_amount\x18\x04 \x01(\x03R\ftargetAmount\x12\x12\n" +
	"\x04rate\x18\x05 \x01(\tR\x04rate*h\n" +
	"\vPayInStatus\x12\x0f\n" +
	"\vPAY_IN_NONE\x10\x00\x12\x12\n" +
	"\x0ePAY_IN_SUCCESS\x10\x01\x12\x0f\n" +
	"\vPAY_IN_FAIL\x10\x02\x12\x12\n" +
	"\x0ePAY_IN_TIMEOUT\x10\x03\x12\x0f\n" +
	"\vPAY_IN_WAIT\x10\x04*n\n" +
	"\fPayOutStatus\x12\x10\n" +
	"\fPAY_OUT_NONE\x10\x00\x12\x13\n" +
	"\x0fPAY_OUT_SUCCESS\x10\x01\x12\x10\n" +
	"\fPAY_OUT_FAIL\x10\x02\x12\x13\n" +
	"\x0fPAY_OUT_TIMEOUT\x10\x03\x12\x10\n" +
	"\fPAY_OUT_WAIT\x10\x04*\x8c\x03\n" +
	"\tAuditType\x12\x11\n" +
	"\rAuditTypeNone\x10\x00\x12\x15\n" +
	"\x11AuditTypeRecharge\x10\x01\x12\x15\n" +
	"\x11AuditTypeWithdraw\x10\x02\x12\x17\n" +
	"\x13AuditTypeSettlement\x10\x03\x12\x14\n" +
	"\x10AuditTypeCorrect\x10\x04\x12\x15\n" +
	"\x11AuditTypeActivity\x10\x05\x12\x13\n" +
	"\x0fAuditTypeRefund\x10\x06\x12\x17\n" +
	"\x13AuditTypeCommission\x10\a\x12\x15\n" +
	"\x11AuditTypeInterest\x10\b\x12\x11\n" +
	"\rAuditTypeTask\x10\t\x12\x10\n" +
	"\fAuditTypeVip\x10\n" +
	"\x12\x1d\n" +
	"\x19AuditTypeRechargeDiscount\x10\v\x12\x11\n" +
	"\rAuditTypeClub\x10\f\x12\x16\n" +
	"\x12AuditTypeGuarantee\x10\r\x12\x13\n" +
	"\x0fAuditTypeSystem\x10\x0e\x12\x1d\n" +
	"\x19AuditTypeAccumulationFund\x10\x0f\x12\x10\n" +
	"\fAuditTypeBox\x10\x10*\xc5\"\n" +
	"\fAuditSubType\x12\x14\n" +
	"\x10AuditSubTypeNone\x10\x00\x12\x1c\n" +
	"\x18AuditSubTypeUalaTransfer\x10\x01\x12#\n" +
	"\x1fAuditSubTypeMercadoPagoTransfer\x10\x02\x12\x1d\n" +
	"\x19AuditSubTypeUpdayTransfer\x10\x03\x12\x18\n" +
	"\x14AuditSubTypeQQWallet\x10\x04\x12\x1e\n" +
	"\x1aAuditSubTypeWalletRecharge\x10\x05\x12\x1d\n" +
	"\x19AuditSubTypeNagadTransfer\x10\x06\x12 \n" +
	"\x1cAuditSubTypeBankCardTransfer\x10\a\x12\x1b\n" +
	"\x17AuditSubTypeUpiTransfer\x10\b\x12\x1f\n" +
	"\x1bAuditSubTypeGrabPayTransfer\x10\t\x12\x1f\n" +
	"\x1bAuditSubTypeLinkajaTransfer\x10\n" +
	"\x12\x1c\n" +
	"\x18AuditSubTypePagaTransfer\x10\v\x12#\n" +
	"\x1fAuditSubTypeFlutterwaveTransfer\x10\f\x12 \n" +
	"\x1cAuditSubTypePaystackTransfer\x10\r\x12#\n" +
	"\x1fAuditSubTypeInterswitchTransfer\x10\x0e\x12\x1c\n" +
	"\x18AuditSubTypeOpayTransfer\x10\x0f\x12!\n" +
	"\x1dAuditSubTypeCellulantTransfer\x10\x10\x12 \n" +
	"\x1cAuditSubTypeKongapayTransfer\x10\x11\x12\x1f\n" +
	"\x1bAuditSubTypeLinePayTransfer\x10\x12\x12 \n" +
	"\x1cAuditSubTypeApplePayTransfer\x10\x13\x12\x1e\n" +
	"\x1aAuditSubTypeAlipayRecharge\x10\x14\x12\x19\n" +
	"\x15AuditSubTypeAlipayApp\x10\x15\x12\x1e\n" +
	"\x1aAuditSubTypeUpaisaTransfer\x10\x16\x12\x1e\n" +
	"\x1aAuditSubTypeKbzPayTransfer\x10\x17\x12\x1e\n" +
	"\x1aAuditSubTypeWeChatTransfer\x10\x18\x12\x1e\n" +
	"\x1aAuditSubTypeWeChatRecharge\x10\x19\x12\x1d\n" +
	"\x19AuditSubTypeGcashTransfer\x10\x1a\x12\x1d\n" +
	"\x19AuditSubTypeClabeTransfer\x10\x1b\x12\x1c\n" +
	"\x18AuditSubTypeTossTransfer\x10\x1c\x12\x1c\n" +
	"\x18AuditSubTypeDokuTransfer\x10\x1d\x12\x18\n" +
	"\x14AuditSubTypeJDWallet\x10\x1e\x12\x1c\n" +
	"\x18AuditSubTypeCardRecharge\x10\x1f\x12\x1b\n" +
	"\x17AuditSubTypePixTransfer\x10 \x12\x1f\n" +
	"\x1bAuditSubTypeHuiWangTransfer\x10!\x12\x1b\n" +
	"\x17AuditSubTypeOvoTransfer\x10\"\x12\x1c\n" +
	"\x18AuditSubTypeMomoTransfer\x10#\x12(\n" +
	"$AuditSubTypeThirdPartyWalletTransfer\x10$\x12!\n" +
	"\x1dAuditSubTypeEasypaisaTransfer\x10%\x12\x1e\n" +
	"\x1aAuditSubTypeAlipayTransfer\x10&\x12'\n" +
	"#AuditSubTypeVirtualCurrencyTransfer\x10'\x12\x1d\n" +
	"\x19AuditSubTypeGopayTransfer\x10(\x12 \n" +
	"\x1cAuditSubTypeJazzCashTransfer\x10)\x12\x1b\n" +
	"\x17AuditSubTypeBaiduWallet\x10*\x12\x1c\n" +
	"\x18AuditSubTypeZaloTransfer\x10+\x12\x1e\n" +
	"\x1aAuditSubTypeRocketTransfer\x10,\x12\x1d\n" +
	"\x19AuditSubTypeBkashTransfer\x10-\x12\x1f\n" +
	"\x1bAuditSubTypePalmPayTransfer\x10.\x12%\n" +
	"!AuditSubTypeMaximumMobileTransfer\x10/\x12\"\n" +
	"\x1eAuditSubTypeBkmExpressTransfer\x100\x12\x1f\n" +
	"\x1bAuditSubTypeFastPayTransfer\x101\x12 \n" +
	"\x1cAuditSubTypeKakaoPayTransfer\x102\x12\x1d\n" +
	"\x19AuditSubTypePaycoTransfer\x103\x12 \n" +
	"\x1cAuditSubTypeSureCashTransfer\x104\x12'\n" +
	"#AuditSubTypeCustomerServiceRecharge\x105\x12\x1e\n" +
	"\x1aAuditSubTypeOnlineRecharge\x106\x12\"\n" +
	"\x1eAuditSubTypeGotymeBankTransfer\x107\x12!\n" +
	"\x1dAuditSubTypeWaveMoneyTransfer\x108\x12\x1c\n" +
	"\x18AuditSubTypeBankRecharge\x109\x12\x1f\n" +
	"\x1bAuditSubTypePaymayaTransfer\x10:\x12\"\n" +
	"\x1eAuditSubTypeSamsungPayTransfer\x10;\x12 \n" +
	"\x1cAuditSubTypeNaverPayTransfer\x10<\x12 \n" +
	"\x1cAuditSubTypeSmilePayTransfer\x10=\x12\x1c\n" +
	"\x18AuditSubTypeDanaTransfer\x10>\x12 \n" +
	"\x1cAuditSubTypeTodoPagoTransfer\x10?\x12 \n" +
	"\x1cAuditSubTypeWithdrawalFreeze\x10@\x12#\n" +
	"\x1fAuditSubTypeWithdrawalRejection\x10A\x12\"\n" +
	"\x1eAuditSubTypeWithdrawalUnfreeze\x10B\x12!\n" +
	"\x1dAuditSubTypeWithdrawalSuccess\x10C\x12 \n" +
	"\x1cAuditSubTypeTransferToOthers\x10D\x12&\n" +
	"\"AuditSubTypeSilverMerchantAddFunds\x10E\x12&\n" +
	"\"AuditSubTypeSilverMerchantRecharge\x10F\x122\n" +
	".AuditSubTypeSilverMerchantGiftMembershipAmount\x10G\x12'\n" +
	"#AuditSubTypeSilverMerchantDeduction\x10H\x12\x1e\n" +
	"\x1aAuditSubTypeManualAddFunds\x10I\x12%\n" +
	"!AuditSubTypeManualOrderCompletion\x10J\x12)\n" +
	"%AuditSubTypeNegativeBalanceCorrection\x10K\x12$\n" +
	" AuditSubTypeRewardManualAddFunds\x10L\x12\x1f\n" +
	"\x1bAuditSubTypeManualDeduction\x10M\x12$\n" +
	" AuditSubTypeDeductionOfAllAssets\x10N\x12!\n" +
	"\x1dAuditSubTypeRecoveryDeduction\x10O\x12\x1e\n" +
	"\x1aAuditSubTypeManualPullBack\x10P\x12'\n" +
	"#AuditSubTypeDeductionOfExcessProfit\x10Q\x12\x1d\n" +
	"\x19AuditSubTypeAgentActivity\x10R\x12 \n" +
	"\x1cAuditSubTypeLuckyBetActivity\x10S\x12\"\n" +
	"\x1eAuditSubTypeInvestmentActivity\x10T\x12\x1e\n" +
	"\x1aAuditSubTypeNewMemberBonus\x10U\x12\"\n" +
	"\x1eAuditSubTypeRescueFundActivity\x10V\x12!\n" +
	"\x1dAuditSubTypePromotionActivity\x10W\x12\x1e\n" +
	"\x1aAuditSubTypeRewardFeedback\x10X\x12!\n" +
	"\x1dAuditSubTypeRedPacketActivity\x10Y\x12#\n" +
	"\x1fAuditSubTypeInvestmentDeduction\x10Z\x12\x1e\n" +
	"\x1aAuditSubTypeSigninActivity\x10[\x12 \n" +
	"\x1cAuditSubTypeRechargeActivity\x10\\\x12\x1f\n" +
	"\x1bAuditSubTypeCuttingActivity\x10]\x12)\n" +
	"%AuditSubTypeLotteryAssistanceActivity\x10^\x12\x1f\n" +
	"\x1bAuditSubTypeRankingActivity\x10_\x12\x1e\n" +
	"\x1aAuditSubTypeCustomActivity\x10`\x12\x16\n" +
	"\x12AuditSubTypeCutOne\x10a\x12$\n" +
	" AuditSubTypeLotteryWheelActivity\x10b\x12\x1d\n" +
	"\x19AuditSubTypeChannelReward\x10c\x12&\n" +
	"\"AuditSubTypeWordCollectionActivity\x10d\x12\x1d\n" +
	"\x19AuditSubTypeGuessActivity\x10e\x12\x1b\n" +
	"\x17AuditSubTypeWaterReturn\x10f\x12\"\n" +
	"\x1eAuditSubTypeCommissionIssuance\x10g\x12$\n" +
	" AuditSubTypeCommissionCollection\x10h\x12&\n" +
	"\"AuditSubTypeInterestTreasureIncome\x10i\x12&\n" +
	"\"AuditSubTypeHallToInterestTreasure\x10j\x12.\n" +
	"*AuditSubTypeManualPullBackInterestTreasure\x10k\x12&\n" +
	"\"AuditSubTypeInterestTreasureToHall\x10l\x12\x19\n" +
	"\x15AuditSubTypeDailyTask\x10m\x12\x1a\n" +
	"\x16AuditSubTypeWeeklyTask\x10n\x12\x1d\n" +
	"\x19AuditSubTypeNewbieWelfare\x10o\x12\x1b\n" +
	"\x17AuditSubTypeActivityBox\x10p\x12\x1e\n" +
	"\x1aAuditSubTypeMysteriousTask\x10q\x12\x1f\n" +
	"\x1bAuditSubTypeVipMonthlyBonus\x10r\x12\x1e\n" +
	"\x1aAuditSubTypeVipDailyReward\x10s\x12\x1e\n" +
	"\x1aAuditSubTypeVipWeeklyBonus\x10t\x12!\n" +
	"\x1dAuditSubTypeVipPromotionBonus\x10u\x12\x18\n" +
	"\x14AuditSubTypeDiscount\x10v\x12\"\n" +
	"\x1eAuditSubTypeManualPullBackClub\x10w\x12\x1a\n" +
	"\x16AuditSubTypeHallToClub\x10x\x12\x1a\n" +
	"\x16AuditSubTypeClubToHall\x10y\x12\x1b\n" +
	"\x17AuditSubTypeClaimFreeze\x10z\x12\x1d\n" +
	"\x19AuditSubTypeClaimUnfreeze\x10{\x12\x18\n" +
	"\x14AuditSubTypeClaimFee\x10|\x12\x1e\n" +
	"\x1aAuditSubTypeClaimAddPoints\x10}\x12#\n" +
	"\x1fAuditSubTypeClaimSubtractPoints\x10~\x12\x15\n" +
	"\x11AuditSubTypeAudit\x10\x7f\x12%\n" +
	" AuditSubTypePublicFundCollection\x10\x80\x01\x12)\n" +
	"$AuditSubTypeBlindBoxLotteryDeduction\x10\x81\x01\x12&\n" +
	"!AuditSubTypeBlindBoxLotteryReward\x10\x82\x01*Y\n" +
	"\x0fAutoReleaseType\x12\x17\n" +
	"\x13AutoReleaseTypeNone\x10\x00\x12\x16\n" +
	"\x12AutoReleaseTypeYes\x10\x01\x12\x15\n" +
	"\x11AutoReleaseTypeNo\x10\x02*\x8e\x01\n" +
	"\x11AuditWithdrawType\x12\x19\n" +
	"\x15AuditWithdrawTypeNone\x10\x00\x12\x1e\n" +
	"\x1aAuditWithdrawTypeMustAudit\x10\x01\x12 \n" +
	"\x1cAuditWithdrawTypeCanWithdraw\x10\x02\x12\x1c\n" +
	"\x18AuditWithdrawTypeMustBet\x10\x03*h\n" +
	"\x11WithdrawLimitType\x12\x19\n" +
	"\x15WithdrawLimitTypeNone\x10\x00\x12\x1d\n" +
	"\x19WithdrawLimitTypeActivity\x10\x01\x12\x19\n" +
	"\x15WithdrawLimitTypeTask\x10\x022\xb6\a\n" +
	"\x15LivePaymentRpcService\x124\n" +
	"\x05PayIn\x12\x14.finance.v1.PayInReq\x1a\x15.finance.v1.PayInResp\x127\n" +
	"\x06PayOut\x12\x15.finance.v1.PayOutReq\x1a\x16.finance.v1.PayOutResp\x12F\n" +
	"\vPayInStatus\x12\x1a.finance.v1.PayInStatusReq\x1a\x1b.finance.v1.PayInStatusResp\x12I\n" +
	"\fPayOutStatus\x12\x1b.finance.v1.PayOutStatusReq\x1a\x1c.finance.v1.PayOutStatusResp\x12:\n" +
	"\aBalance\x12\x16.finance.v1.BalanceReq\x1a\x17.finance.v1.BalanceResp\x12=\n" +
	"\bRecharge\x12\x17.finance.v1.RechargeReq\x1a\x18.finance.v1.RechargeResp\x12=\n" +
	"\bWithdraw\x12\x17.finance.v1.WithdrawReq\x1a\x18.finance.v1.WithdrawResp\x12X\n" +
	"\x11AutoWithdrawJudge\x12 .finance.v1.AutoWithdrawJudgeReq\x1a!.finance.v1.AutoWithdrawJudgeResp\x12I\n" +
	"\fAutoWithdraw\x12\x1b.finance.v1.AutoWithdrawReq\x1a\x1c.finance.v1.AutoWithdrawResp\x12R\n" +
	"\x0fCalcWithdrawFee\x12\x1e.finance.v1.CalcWithdrawFeeReq\x1a\x1f.finance.v1.CalcWithdrawFeeResp\x12X\n" +
	"\x11AutoWithdrawMatch\x12 .finance.v1.AutoWithdrawMatchReq\x1a!.finance.v1.AutoWithdrawMatchResp\x12C\n" +
	"\n" +
	"ReWithdraw\x12\x19.finance.v1.ReWithdrawReq\x1a\x1a.finance.v1.ReWithdrawResp\x12I\n" +
	"\fCalcRecharge\x12\x1b.finance.v1.CalcRechargeReq\x1a\x1c.finance.v1.CalcRechargeResp2\x92\x03\n" +
	"\x13LiveAuditRpcService\x12=\n" +
	"\bAddAudit\x12\x17.finance.v1.AddAuditReq\x1a\x18.finance.v1.AddAuditResp\x12X\n" +
	"\x11UpdateAuditAmount\x12 .finance.v1.UpdateAuditAmountReq\x1a!.finance.v1.UpdateAuditAmountResp\x12I\n" +
	"\fGetAuditInfo\x12\x1b.finance.v1.GetAuditInfoReq\x1a\x1c.finance.v1.GetAuditInfoResp\x12I\n" +
	"\fGetAuditList\x12\x1b.finance.v1.GetAuditListReq\x1a\x1c.finance.v1.GetAuditListResp\x12L\n" +
	"\rBatchAddAudit\x12\x1c.finance.v1.BatchAddAuditReq\x1a\x1d.finance.v1.BatchAddAuditResp2\xe6\x01\n" +
	"\x1bLiveWithdrawLimitRpcService\x12U\n" +
	"\x10AddWithdrawLimit\x12\x1f.finance.v1.AddWithdrawLimitReq\x1a .finance.v1.AddWithdrawLimitResp\x12p\n" +
	"\x19UpdateWithdrawLimitAmount\x12(.finance.v1.UpdateWithdrawLimitAmountReq\x1a).finance.v1.UpdateWithdrawLimitAmountResp2j\n" +
	"\x1aLiveExchangeRateRpcService\x12L\n" +
	"\x0fGetExchangeRate\x12\x1b.finance.v1.ExchangeRateReq\x1a\x1c.finance.v1.ExchangeRateRespB\tZ\a./pb/v1b\x06proto3"

var (
	file_finance_v1_finance_proto_rawDescOnce sync.Once
	file_finance_v1_finance_proto_rawDescData []byte
)

func file_finance_v1_finance_proto_rawDescGZIP() []byte {
	file_finance_v1_finance_proto_rawDescOnce.Do(func() {
		file_finance_v1_finance_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_finance_v1_finance_proto_rawDesc), len(file_finance_v1_finance_proto_rawDesc)))
	})
	return file_finance_v1_finance_proto_rawDescData
}

var file_finance_v1_finance_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_finance_v1_finance_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_finance_v1_finance_proto_goTypes = []any{
	(PayInStatus)(0),                      // 0: finance.v1.PayInStatus
	(PayOutStatus)(0),                     // 1: finance.v1.PayOutStatus
	(AuditType)(0),                        // 2: finance.v1.AuditType
	(AuditSubType)(0),                     // 3: finance.v1.AuditSubType
	(AutoReleaseType)(0),                  // 4: finance.v1.AutoReleaseType
	(AuditWithdrawType)(0),                // 5: finance.v1.AuditWithdrawType
	(WithdrawLimitType)(0),                // 6: finance.v1.WithdrawLimitType
	(*PayInReq)(nil),                      // 7: finance.v1.PayInReq
	(*PayInResp)(nil),                     // 8: finance.v1.PayInResp
	(*PayOutReq)(nil),                     // 9: finance.v1.PayOutReq
	(*PayOutResp)(nil),                    // 10: finance.v1.PayOutResp
	(*PayInStatusReq)(nil),                // 11: finance.v1.PayInStatusReq
	(*PayInStatusResp)(nil),               // 12: finance.v1.PayInStatusResp
	(*PayOutStatusReq)(nil),               // 13: finance.v1.PayOutStatusReq
	(*PayOutStatusResp)(nil),              // 14: finance.v1.PayOutStatusResp
	(*BalanceReq)(nil),                    // 15: finance.v1.BalanceReq
	(*BalanceResp)(nil),                   // 16: finance.v1.BalanceResp
	(*CalcRechargeReq)(nil),               // 17: finance.v1.CalcRechargeReq
	(*CalcRechargeResp)(nil),              // 18: finance.v1.CalcRechargeResp
	(*RechargeReq)(nil),                   // 19: finance.v1.RechargeReq
	(*RechargeResp)(nil),                  // 20: finance.v1.RechargeResp
	(*AutoWithdrawJudgeReq)(nil),          // 21: finance.v1.AutoWithdrawJudgeReq
	(*AutoWithdrawJudgeResp)(nil),         // 22: finance.v1.AutoWithdrawJudgeResp
	(*AutoWithdrawReq)(nil),               // 23: finance.v1.AutoWithdrawReq
	(*AutoWithdrawResp)(nil),              // 24: finance.v1.AutoWithdrawResp
	(*CalcWithdrawFeeReq)(nil),            // 25: finance.v1.CalcWithdrawFeeReq
	(*CalcWithdrawFeeResp)(nil),           // 26: finance.v1.CalcWithdrawFeeResp
	(*AutoWithdrawMatchReq)(nil),          // 27: finance.v1.AutoWithdrawMatchReq
	(*AutoWithdrawMatchResp)(nil),         // 28: finance.v1.AutoWithdrawMatchResp
	(*ReWithdrawReq)(nil),                 // 29: finance.v1.ReWithdrawReq
	(*ReWithdrawResp)(nil),                // 30: finance.v1.ReWithdrawResp
	(*AddAuditReq)(nil),                   // 31: finance.v1.AddAuditReq
	(*AddAuditResp)(nil),                  // 32: finance.v1.AddAuditResp
	(*UpdateAuditAmountReq)(nil),          // 33: finance.v1.UpdateAuditAmountReq
	(*UpdateAuditAmountResp)(nil),         // 34: finance.v1.UpdateAuditAmountResp
	(*GetAuditInfoReq)(nil),               // 35: finance.v1.GetAuditInfoReq
	(*GetAuditInfoResp)(nil),              // 36: finance.v1.GetAuditInfoResp
	(*GetAuditListReq)(nil),               // 37: finance.v1.GetAuditListReq
	(*AuditInfo)(nil),                     // 38: finance.v1.AuditInfo
	(*GetAuditListResp)(nil),              // 39: finance.v1.GetAuditListResp
	(*AddAudit)(nil),                      // 40: finance.v1.AddAudit
	(*BatchAddAuditReq)(nil),              // 41: finance.v1.BatchAddAuditReq
	(*BatchAddAuditResp)(nil),             // 42: finance.v1.BatchAddAuditResp
	(*AddWithdrawLimitReq)(nil),           // 43: finance.v1.AddWithdrawLimitReq
	(*AddWithdrawLimitResp)(nil),          // 44: finance.v1.AddWithdrawLimitResp
	(*UpdateWithdrawLimitAmountReq)(nil),  // 45: finance.v1.UpdateWithdrawLimitAmountReq
	(*UpdateWithdrawLimitAmountResp)(nil), // 46: finance.v1.UpdateWithdrawLimitAmountResp
	(*WithdrawReq)(nil),                   // 47: finance.v1.WithdrawReq
	(*WithdrawResp)(nil),                  // 48: finance.v1.WithdrawResp
	(*ExchangeRateReq)(nil),               // 49: finance.v1.ExchangeRateReq
	(*ExchangeRateResp)(nil),              // 50: finance.v1.ExchangeRateResp
}
var file_finance_v1_finance_proto_depIdxs = []int32{
	0,  // 0: finance.v1.PayInStatusResp.status:type_name -> finance.v1.PayInStatus
	1,  // 1: finance.v1.PayOutStatusResp.status:type_name -> finance.v1.PayOutStatus
	4,  // 2: finance.v1.AddAuditReq.auto_release_type:type_name -> finance.v1.AutoReleaseType
	2,  // 3: finance.v1.AddAuditReq.audit_type:type_name -> finance.v1.AuditType
	3,  // 4: finance.v1.AddAuditReq.audit_sub_type:type_name -> finance.v1.AuditSubType
	5,  // 5: finance.v1.AddAuditReq.audit_withdraw_type:type_name -> finance.v1.AuditWithdrawType
	38, // 6: finance.v1.GetAuditListResp.audit_list:type_name -> finance.v1.AuditInfo
	4,  // 7: finance.v1.AddAudit.auto_release_type:type_name -> finance.v1.AutoReleaseType
	2,  // 8: finance.v1.AddAudit.audit_type:type_name -> finance.v1.AuditType
	3,  // 9: finance.v1.AddAudit.audit_sub_type:type_name -> finance.v1.AuditSubType
	5,  // 10: finance.v1.AddAudit.audit_withdraw_type:type_name -> finance.v1.AuditWithdrawType
	40, // 11: finance.v1.BatchAddAuditReq.audit_list:type_name -> finance.v1.AddAudit
	6,  // 12: finance.v1.AddWithdrawLimitReq.withdraw_limit_type:type_name -> finance.v1.WithdrawLimitType
	7,  // 13: finance.v1.LivePaymentRpcService.PayIn:input_type -> finance.v1.PayInReq
	9,  // 14: finance.v1.LivePaymentRpcService.PayOut:input_type -> finance.v1.PayOutReq
	11, // 15: finance.v1.LivePaymentRpcService.PayInStatus:input_type -> finance.v1.PayInStatusReq
	13, // 16: finance.v1.LivePaymentRpcService.PayOutStatus:input_type -> finance.v1.PayOutStatusReq
	15, // 17: finance.v1.LivePaymentRpcService.Balance:input_type -> finance.v1.BalanceReq
	19, // 18: finance.v1.LivePaymentRpcService.Recharge:input_type -> finance.v1.RechargeReq
	47, // 19: finance.v1.LivePaymentRpcService.Withdraw:input_type -> finance.v1.WithdrawReq
	21, // 20: finance.v1.LivePaymentRpcService.AutoWithdrawJudge:input_type -> finance.v1.AutoWithdrawJudgeReq
	23, // 21: finance.v1.LivePaymentRpcService.AutoWithdraw:input_type -> finance.v1.AutoWithdrawReq
	25, // 22: finance.v1.LivePaymentRpcService.CalcWithdrawFee:input_type -> finance.v1.CalcWithdrawFeeReq
	27, // 23: finance.v1.LivePaymentRpcService.AutoWithdrawMatch:input_type -> finance.v1.AutoWithdrawMatchReq
	29, // 24: finance.v1.LivePaymentRpcService.ReWithdraw:input_type -> finance.v1.ReWithdrawReq
	17, // 25: finance.v1.LivePaymentRpcService.CalcRecharge:input_type -> finance.v1.CalcRechargeReq
	31, // 26: finance.v1.LiveAuditRpcService.AddAudit:input_type -> finance.v1.AddAuditReq
	33, // 27: finance.v1.LiveAuditRpcService.UpdateAuditAmount:input_type -> finance.v1.UpdateAuditAmountReq
	35, // 28: finance.v1.LiveAuditRpcService.GetAuditInfo:input_type -> finance.v1.GetAuditInfoReq
	37, // 29: finance.v1.LiveAuditRpcService.GetAuditList:input_type -> finance.v1.GetAuditListReq
	41, // 30: finance.v1.LiveAuditRpcService.BatchAddAudit:input_type -> finance.v1.BatchAddAuditReq
	43, // 31: finance.v1.LiveWithdrawLimitRpcService.AddWithdrawLimit:input_type -> finance.v1.AddWithdrawLimitReq
	45, // 32: finance.v1.LiveWithdrawLimitRpcService.UpdateWithdrawLimitAmount:input_type -> finance.v1.UpdateWithdrawLimitAmountReq
	49, // 33: finance.v1.LiveExchangeRateRpcService.GetExchangeRate:input_type -> finance.v1.ExchangeRateReq
	8,  // 34: finance.v1.LivePaymentRpcService.PayIn:output_type -> finance.v1.PayInResp
	10, // 35: finance.v1.LivePaymentRpcService.PayOut:output_type -> finance.v1.PayOutResp
	12, // 36: finance.v1.LivePaymentRpcService.PayInStatus:output_type -> finance.v1.PayInStatusResp
	14, // 37: finance.v1.LivePaymentRpcService.PayOutStatus:output_type -> finance.v1.PayOutStatusResp
	16, // 38: finance.v1.LivePaymentRpcService.Balance:output_type -> finance.v1.BalanceResp
	20, // 39: finance.v1.LivePaymentRpcService.Recharge:output_type -> finance.v1.RechargeResp
	48, // 40: finance.v1.LivePaymentRpcService.Withdraw:output_type -> finance.v1.WithdrawResp
	22, // 41: finance.v1.LivePaymentRpcService.AutoWithdrawJudge:output_type -> finance.v1.AutoWithdrawJudgeResp
	24, // 42: finance.v1.LivePaymentRpcService.AutoWithdraw:output_type -> finance.v1.AutoWithdrawResp
	26, // 43: finance.v1.LivePaymentRpcService.CalcWithdrawFee:output_type -> finance.v1.CalcWithdrawFeeResp
	28, // 44: finance.v1.LivePaymentRpcService.AutoWithdrawMatch:output_type -> finance.v1.AutoWithdrawMatchResp
	30, // 45: finance.v1.LivePaymentRpcService.ReWithdraw:output_type -> finance.v1.ReWithdrawResp
	18, // 46: finance.v1.LivePaymentRpcService.CalcRecharge:output_type -> finance.v1.CalcRechargeResp
	32, // 47: finance.v1.LiveAuditRpcService.AddAudit:output_type -> finance.v1.AddAuditResp
	34, // 48: finance.v1.LiveAuditRpcService.UpdateAuditAmount:output_type -> finance.v1.UpdateAuditAmountResp
	36, // 49: finance.v1.LiveAuditRpcService.GetAuditInfo:output_type -> finance.v1.GetAuditInfoResp
	39, // 50: finance.v1.LiveAuditRpcService.GetAuditList:output_type -> finance.v1.GetAuditListResp
	42, // 51: finance.v1.LiveAuditRpcService.BatchAddAudit:output_type -> finance.v1.BatchAddAuditResp
	44, // 52: finance.v1.LiveWithdrawLimitRpcService.AddWithdrawLimit:output_type -> finance.v1.AddWithdrawLimitResp
	46, // 53: finance.v1.LiveWithdrawLimitRpcService.UpdateWithdrawLimitAmount:output_type -> finance.v1.UpdateWithdrawLimitAmountResp
	50, // 54: finance.v1.LiveExchangeRateRpcService.GetExchangeRate:output_type -> finance.v1.ExchangeRateResp
	34, // [34:55] is the sub-list for method output_type
	13, // [13:34] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_finance_v1_finance_proto_init() }
func file_finance_v1_finance_proto_init() {
	if File_finance_v1_finance_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_finance_v1_finance_proto_rawDesc), len(file_finance_v1_finance_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_finance_v1_finance_proto_goTypes,
		DependencyIndexes: file_finance_v1_finance_proto_depIdxs,
		EnumInfos:         file_finance_v1_finance_proto_enumTypes,
		MessageInfos:      file_finance_v1_finance_proto_msgTypes,
	}.Build()
	File_finance_v1_finance_proto = out.File
	file_finance_v1_finance_proto_goTypes = nil
	file_finance_v1_finance_proto_depIdxs = nil
}
