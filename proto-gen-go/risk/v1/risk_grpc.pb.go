// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: risk/v1/risk.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveRiskInnerService_NotifyRiskRuleTrigger_FullMethodName  = "/risk.v1.LiveRiskInnerService/NotifyRiskRuleTrigger"
	LiveRiskInnerService_GetUserRiskList_FullMethodName        = "/risk.v1.LiveRiskInnerService/GetUserRiskList"
	LiveRiskInnerService_BatchGetUserRiskList_FullMethodName   = "/risk.v1.LiveRiskInnerService/BatchGetUserRiskList"
	LiveRiskInnerService_BatchDelUserRiskList_FullMethodName   = "/risk.v1.LiveRiskInnerService/BatchDelUserRiskList"
	LiveRiskInnerService_GetIpOrDeviceUserCount_FullMethodName = "/risk.v1.LiveRiskInnerService/GetIpOrDeviceUserCount"
)

// LiveRiskInnerServiceClient is the client API for LiveRiskInnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveRiskInnerServiceClient interface {
	// NotifyRiskRuleTrigger 处理通知风控触发规则
	NotifyRiskRuleTrigger(ctx context.Context, in *NotifyRiskRuleTriggerReq, opts ...grpc.CallOption) (*NotifyRiskRuleTriggerReply, error)
	// 获取用户风控名单标识
	GetUserRiskList(ctx context.Context, in *GetUserRiskListReq, opts ...grpc.CallOption) (*GetUserRiskListReply, error)
	// 批量获取用户风控名单
	BatchGetUserRiskList(ctx context.Context, in *BatchGetUserRiskListReq, opts ...grpc.CallOption) (*BatchGetUserRiskListReply, error)
	// 删除批量用户风控名单
	BatchDelUserRiskList(ctx context.Context, in *BatchDelUserRiskListReq, opts ...grpc.CallOption) (*RiskReply, error)
	// 获取指定IP地址和设备号的用户使用数量
	GetIpOrDeviceUserCount(ctx context.Context, in *IpOrDeviceUserCountReq, opts ...grpc.CallOption) (*IpOrDeviceUserCountReply, error)
}

type liveRiskInnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveRiskInnerServiceClient(cc grpc.ClientConnInterface) LiveRiskInnerServiceClient {
	return &liveRiskInnerServiceClient{cc}
}

func (c *liveRiskInnerServiceClient) NotifyRiskRuleTrigger(ctx context.Context, in *NotifyRiskRuleTriggerReq, opts ...grpc.CallOption) (*NotifyRiskRuleTriggerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyRiskRuleTriggerReply)
	err := c.cc.Invoke(ctx, LiveRiskInnerService_NotifyRiskRuleTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRiskInnerServiceClient) GetUserRiskList(ctx context.Context, in *GetUserRiskListReq, opts ...grpc.CallOption) (*GetUserRiskListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRiskListReply)
	err := c.cc.Invoke(ctx, LiveRiskInnerService_GetUserRiskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRiskInnerServiceClient) BatchGetUserRiskList(ctx context.Context, in *BatchGetUserRiskListReq, opts ...grpc.CallOption) (*BatchGetUserRiskListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUserRiskListReply)
	err := c.cc.Invoke(ctx, LiveRiskInnerService_BatchGetUserRiskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRiskInnerServiceClient) BatchDelUserRiskList(ctx context.Context, in *BatchDelUserRiskListReq, opts ...grpc.CallOption) (*RiskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RiskReply)
	err := c.cc.Invoke(ctx, LiveRiskInnerService_BatchDelUserRiskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRiskInnerServiceClient) GetIpOrDeviceUserCount(ctx context.Context, in *IpOrDeviceUserCountReq, opts ...grpc.CallOption) (*IpOrDeviceUserCountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IpOrDeviceUserCountReply)
	err := c.cc.Invoke(ctx, LiveRiskInnerService_GetIpOrDeviceUserCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveRiskInnerServiceServer is the server API for LiveRiskInnerService service.
// All implementations must embed UnimplementedLiveRiskInnerServiceServer
// for forward compatibility.
type LiveRiskInnerServiceServer interface {
	// NotifyRiskRuleTrigger 处理通知风控触发规则
	NotifyRiskRuleTrigger(context.Context, *NotifyRiskRuleTriggerReq) (*NotifyRiskRuleTriggerReply, error)
	// 获取用户风控名单标识
	GetUserRiskList(context.Context, *GetUserRiskListReq) (*GetUserRiskListReply, error)
	// 批量获取用户风控名单
	BatchGetUserRiskList(context.Context, *BatchGetUserRiskListReq) (*BatchGetUserRiskListReply, error)
	// 删除批量用户风控名单
	BatchDelUserRiskList(context.Context, *BatchDelUserRiskListReq) (*RiskReply, error)
	// 获取指定IP地址和设备号的用户使用数量
	GetIpOrDeviceUserCount(context.Context, *IpOrDeviceUserCountReq) (*IpOrDeviceUserCountReply, error)
	mustEmbedUnimplementedLiveRiskInnerServiceServer()
}

// UnimplementedLiveRiskInnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveRiskInnerServiceServer struct{}

func (UnimplementedLiveRiskInnerServiceServer) NotifyRiskRuleTrigger(context.Context, *NotifyRiskRuleTriggerReq) (*NotifyRiskRuleTriggerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRiskRuleTrigger not implemented")
}
func (UnimplementedLiveRiskInnerServiceServer) GetUserRiskList(context.Context, *GetUserRiskListReq) (*GetUserRiskListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRiskList not implemented")
}
func (UnimplementedLiveRiskInnerServiceServer) BatchGetUserRiskList(context.Context, *BatchGetUserRiskListReq) (*BatchGetUserRiskListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserRiskList not implemented")
}
func (UnimplementedLiveRiskInnerServiceServer) BatchDelUserRiskList(context.Context, *BatchDelUserRiskListReq) (*RiskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDelUserRiskList not implemented")
}
func (UnimplementedLiveRiskInnerServiceServer) GetIpOrDeviceUserCount(context.Context, *IpOrDeviceUserCountReq) (*IpOrDeviceUserCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpOrDeviceUserCount not implemented")
}
func (UnimplementedLiveRiskInnerServiceServer) mustEmbedUnimplementedLiveRiskInnerServiceServer() {}
func (UnimplementedLiveRiskInnerServiceServer) testEmbeddedByValue()                              {}

// UnsafeLiveRiskInnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveRiskInnerServiceServer will
// result in compilation errors.
type UnsafeLiveRiskInnerServiceServer interface {
	mustEmbedUnimplementedLiveRiskInnerServiceServer()
}

func RegisterLiveRiskInnerServiceServer(s grpc.ServiceRegistrar, srv LiveRiskInnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedLiveRiskInnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveRiskInnerService_ServiceDesc, srv)
}

func _LiveRiskInnerService_NotifyRiskRuleTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRiskRuleTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRiskInnerServiceServer).NotifyRiskRuleTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveRiskInnerService_NotifyRiskRuleTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRiskInnerServiceServer).NotifyRiskRuleTrigger(ctx, req.(*NotifyRiskRuleTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRiskInnerService_GetUserRiskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRiskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRiskInnerServiceServer).GetUserRiskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveRiskInnerService_GetUserRiskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRiskInnerServiceServer).GetUserRiskList(ctx, req.(*GetUserRiskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRiskInnerService_BatchGetUserRiskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserRiskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRiskInnerServiceServer).BatchGetUserRiskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveRiskInnerService_BatchGetUserRiskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRiskInnerServiceServer).BatchGetUserRiskList(ctx, req.(*BatchGetUserRiskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRiskInnerService_BatchDelUserRiskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDelUserRiskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRiskInnerServiceServer).BatchDelUserRiskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveRiskInnerService_BatchDelUserRiskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRiskInnerServiceServer).BatchDelUserRiskList(ctx, req.(*BatchDelUserRiskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRiskInnerService_GetIpOrDeviceUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpOrDeviceUserCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRiskInnerServiceServer).GetIpOrDeviceUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveRiskInnerService_GetIpOrDeviceUserCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRiskInnerServiceServer).GetIpOrDeviceUserCount(ctx, req.(*IpOrDeviceUserCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveRiskInnerService_ServiceDesc is the grpc.ServiceDesc for LiveRiskInnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveRiskInnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "risk.v1.LiveRiskInnerService",
	HandlerType: (*LiveRiskInnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyRiskRuleTrigger",
			Handler:    _LiveRiskInnerService_NotifyRiskRuleTrigger_Handler,
		},
		{
			MethodName: "GetUserRiskList",
			Handler:    _LiveRiskInnerService_GetUserRiskList_Handler,
		},
		{
			MethodName: "BatchGetUserRiskList",
			Handler:    _LiveRiskInnerService_BatchGetUserRiskList_Handler,
		},
		{
			MethodName: "BatchDelUserRiskList",
			Handler:    _LiveRiskInnerService_BatchDelUserRiskList_Handler,
		},
		{
			MethodName: "GetIpOrDeviceUserCount",
			Handler:    _LiveRiskInnerService_GetIpOrDeviceUserCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "risk/v1/risk.proto",
}
