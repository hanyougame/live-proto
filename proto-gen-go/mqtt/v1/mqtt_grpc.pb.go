// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: mqtt/v1/mqtt.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PushService_PushToAll_FullMethodName   = "/mqtt.v1.PushService/PushToAll"
	PushService_PushToUser_FullMethodName  = "/mqtt.v1.PushService/PushToUser"
	PushService_PushToUsers_FullMethodName = "/mqtt.v1.PushService/PushToUsers"
)

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushServiceClient interface {
	PushToAll(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	PushToUser(ctx context.Context, in *PushToUserRequest, opts ...grpc.CallOption) (*PushResponse, error)
	PushToUsers(ctx context.Context, in *PushToUsersRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type pushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServiceClient(cc grpc.ClientConnInterface) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) PushToAll(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, PushService_PushToAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) PushToUser(ctx context.Context, in *PushToUserRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, PushService_PushToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) PushToUsers(ctx context.Context, in *PushToUsersRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, PushService_PushToUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServiceServer is the server API for PushService service.
// All implementations must embed UnimplementedPushServiceServer
// for forward compatibility.
type PushServiceServer interface {
	PushToAll(context.Context, *PushRequest) (*PushResponse, error)
	PushToUser(context.Context, *PushToUserRequest) (*PushResponse, error)
	PushToUsers(context.Context, *PushToUsersRequest) (*PushResponse, error)
	mustEmbedUnimplementedPushServiceServer()
}

// UnimplementedPushServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPushServiceServer struct{}

func (UnimplementedPushServiceServer) PushToAll(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToAll not implemented")
}
func (UnimplementedPushServiceServer) PushToUser(context.Context, *PushToUserRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToUser not implemented")
}
func (UnimplementedPushServiceServer) PushToUsers(context.Context, *PushToUsersRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushToUsers not implemented")
}
func (UnimplementedPushServiceServer) mustEmbedUnimplementedPushServiceServer() {}
func (UnimplementedPushServiceServer) testEmbeddedByValue()                     {}

// UnsafePushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServiceServer will
// result in compilation errors.
type UnsafePushServiceServer interface {
	mustEmbedUnimplementedPushServiceServer()
}

func RegisterPushServiceServer(s grpc.ServiceRegistrar, srv PushServiceServer) {
	// If the following call pancis, it indicates UnimplementedPushServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PushService_ServiceDesc, srv)
}

func _PushService_PushToAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).PushToAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_PushToAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).PushToAll(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_PushToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).PushToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_PushToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).PushToUser(ctx, req.(*PushToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_PushToUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushToUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).PushToUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_PushToUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).PushToUsers(ctx, req.(*PushToUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PushService_ServiceDesc is the grpc.ServiceDesc for PushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mqtt.v1.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushToAll",
			Handler:    _PushService_PushToAll_Handler,
		},
		{
			MethodName: "PushToUser",
			Handler:    _PushService_PushToUser_Handler,
		},
		{
			MethodName: "PushToUsers",
			Handler:    _PushService_PushToUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mqtt/v1/mqtt.proto",
}
